uuid %in% c("eb3b9935-fa0b-4d54-8058-3b629f1421ad", "eec1f630-15d5-475e-a344-32bba74b32ea", "f1175d29-ce1f-43a7-b3d1-ee26cd1b8cdb")) %>%
select(uuid, question, old_value, new_value)
my_filled_log %>%
filter(question == "water_supply_other_neighbourhoods_why",
change_type == "blank_response")
my_kobo_survey %>%
filter(name == "water_supply_other_neighbourhoods_why") %>%
select(type, name, relevant)
my_clean_data %>%
filter(X_uuid == "019bc718-c06a-46b8-bba8-c84f6c6efbd5") %>%
select(water_supply_other_neighbourhoods, water_supply_other_neighbourhoods_why	)
review_other_log  %>% View()
review_other_log <- review_others(dataset = my_clean_data2$data_with_fix_concat,
uuid_column = "X_uuid",
kobo_survey = my_kobo_survey,
columns_not_to_check = "consent_telephone_number")
View(review_other_log)
library(presentresults)
my_results_table <- my_results$results_table
#| warning: false
library(analysistools)
library(dplyr)
my_data <- analysistools::analysistools_MSNA_template_data
sampling_frame <- data.frame(
strata = c("admin1a", "admin1b", "admin1c"),
population = c(100000, 200000, 300000)
)
set.seed(1323)
my_data <- my_data |>
mutate(num_aged_school_children = round(runif(100, min = 0, max = 5)),
num_enrolled_school_children = round(runif(100, min = 0, max = 5)),
num_enrolled_school_children = case_when(num_aged_school_children == 0 ~ NA, num_aged_school_children < num_enrolled_school_children ~ num_aged_school_children,
TRUE ~ num_enrolled_school_children
))
my_loa <- analysistools::analysistools_MSNA_template_loa
my_loa
#| output: false
my_data <- my_data %>%
add_weights(sampling_frame, "admin1", "strata", "population")
my_design <- srvyr::as_survey_design(my_data, weights = "weights", strata = "admin1")
my_results <- create_analysis(my_design, loa = my_loa, sm_separator = "/")
head_results_table <- my_results$results_table %>%
head(5)
tail_results_table <- my_results$results_table %>%
tail(5)
rbind(head_results_table,tail_results_table)
my_loa_with_ratio <- read.csv("inputs/07 - example - loa_with_ratio.csv")
my_loa_with_ratio %>%
filter(analysis_type == "ratio") |>
select(analysis_type, analysis_var, group_var, analysis_var_numerator, analysis_var_denominator)
#| output: false
my_results_with_ratio <- create_analysis(my_design, loa = my_loa_with_ratio, sm_separator = "/")
my_results_with_ratio$results_table %>%
filter(analysis_type == "ratio")
school_ex <- data.frame(
hh = c("hh1", "hh2", "hh3", "hh4"),
num_children = c(3, 0, 2, NA),
num_enrolled = c(3, NA, 0, NA),
num_attending = c(1, NA, NA, NA)
)
me_design <- srvyr::as_survey(school_ex)
school_ex
create_analysis_ratio(me_design,
analysis_var_numerator = "num_attending",
analysis_var_denominator = "num_children") %>%
select(analysis_type, analysis_var, stat, n, n_total, analysis_key)
create_analysis_ratio(me_design,
analysis_var_numerator = "num_attending",
analysis_var_denominator = "num_children",
numerator_NA_to_0 = FALSE) %>%
select(analysis_type, analysis_var, stat, n, n_total, analysis_key)
create_analysis_ratio(me_design,
analysis_var_numerator = "num_attending",
analysis_var_denominator = "num_children",
filter_denominator_0 = FALSE)  %>%
select(analysis_type, analysis_var, stat, n, n_total, analysis_key)
my_loa_for_review <- my_results_with_ratio$results_table %>%
create_loa_from_results()
my_loa_for_review
#| output: false
my_design_for_review <- srvyr::as_survey_design(my_data, weights = "weights", strata = "admin1")
analysis_for_review <- create_analysis(my_design_for_review, my_loa_for_review, sm_separator = "/")
binded_table <- my_results_with_ratio$results_table %>%
left_join(analysis_for_review$results_table, by = "analysis_key")
my_review <- review_analysis(binded_table)
typeof(my_review)
names(my_review)
my_review$review_table %>%
head()
my_review$review_table %>%
group_by(stat, review_check, review_comment) %>%
tally()
jittered_results_table <- binded_table
set.seed(123)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.x"] <- sample(unique(jittered_results_table$stat.x), 5, T)
set.seed(124)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.y"] <- sample(unique(jittered_results_table$stat.y), 5, T)
set.seed(125)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.x"] <- NA
set.seed(1236)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.y"] <- NA
my_jittered_review <- review_analysis(jittered_results_table,
stat_columns_to_review = "stat.x",
stat_columns_to_compare_with = "stat.y")
my_jittered_review$review_table %>%
group_by(stat, review_check, review_comment) %>%
tally()
my_jittered_review$results_table %>%
filter(!review_check_stat.x) %>%
head(10)
#| echo: false
analysistools_MSNA_template_survey %>%
filter(name %in% c("wash_soap", "wash_drinkingwatersource", "health_barriers", "income_v2_total", "expenditure_health", "rCSIMealAdult")) %>%
select(name, `label::english`, type) %>%
mutate(`label::english` = case_when(`label::english` == "${health_barriers_question_select}" ~ "What are your barriers to access health care?",
TRUE ~ `label::english`))
exercise_data <- analysistools::analysistools_MSNA_template_data
exercise_sampling_frame <- data.frame(
strata = c("admin1a", "admin1b", "admin1c"),
population = c(100000, 200000, 300000)
)
template_loa <- readxl::read_excel("inputs/08 - exercise - template loa.xlsx")
#| output: false
exercise_data <- exercise_data %>%
add_weights(
exercise_sampling_frame,
"admin1", "strata", "population"
)
exercise_design <- srvyr::as_survey_design(exercise_data, weights = "weights", strata = "admin1")
exercise_loa <- readxl::read_excel("inputs/09 - correction - loa.xlsx")
exercise_results <- create_analysis(exercise_design, loa = exercise_loa, sm_separator = "/")
analysis_to_review <- readxl::read_excel("inputs/10 - exercise - analysis_to_review.xlsx")
dataset_to_review <- readxl::read_excel("inputs/10 - exercise - analysis_to_review.xlsx", sheet = "dataset")
loa_for_review <- analysis_to_review %>%
create_loa_from_results()
review_design <- srvyr::as_survey_design(dataset_to_review, strata = "admin1")
my_analysis_exercise <- create_analysis(review_design, loa = loa_for_review, sm_separator = "/")
my_results_table_shorter <- my_analysis_exercise$results_table %>%
select(analysis_key, stat)
binded_results_table <- analysis_to_review %>%
full_join(my_results_table_shorter, by = "analysis_key")
exercise_review <- review_analysis(binded_results_table,
stat_columns_to_review = "stat.x",
stat_columns_to_compare_with = "stat.y",
analysis_key_column = "analysis_key")
exercise_review$review_table %>%
group_by(review_check,review_comment) %>%
tally()
library(presentresults)
my_results_table <- my_results$results_table
View(my_results_table)
my_results_table %>%
create_table_group_x_variable() %>%
create_xlsx_group_x_variable(file_path = "outputs/04 - example - group_x_variable.xlsx", overwrite = T)
my_results_table %>%
create_table_group_x_variable(value_columns = "stat") %>%
create_xlsx_group_x_variable(file_path = "outputs/04 - example - group_x_variable.xlsx", overwrite = T)
my_results_table %>%
create_table_group_x_variable(value_columns = c("stat", "n","n_total", "n_w")) %>%
create_xlsx_group_x_variable(file_path = "outputs/04 - example - group_x_variable.xlsx", overwrite = T)
my_results_table %>%
create_table_variable_x_group(value_columns = c("stat", "n")) %>%
create_xlsx_variable_x_group(file_path = "outputs/05 - example - variable_x_group.xlsx", overwrite = T)
my_results_table %>%
create_table_variable_x_group(value_columns = c("stat", "n")) %>%
create_xlsx_variable_x_group(file_path = "outputs/05 - example - variable_x_group.xlsx", overwrite = T, value_columns = c("stats", "n"))
my_results_table %>%
create_table_group_x_variable(value_columns = c("stat", "n","n_total", "n_w")) -> xx
View(xx)
my_results_table_new <- my_results_table %>%
select(stat, analysis_key)
my_results_table_new %>%
create_table_group_x_variable() %>%
create_xlsx_group_x_variable(file_path = "outputs/example.xlsx")
my_results_table_new %>%
create_table_group_x_variable(value_columns = "stat") %>%
create_xlsx_group_x_variable(file_path = "outputs/example.xlsx")
my_results_table_new %>% View()
my_results_table_new %>%
create_table_group_x_variable(value_columns = "stat") %>%
create_xlsx_group_x_variable(file_path = "outputs/example2.xlsx")
my_results_table_new %>%
create_analysis_key_table() %>% View()
#| warning: false
library(cleaningtools)
library(dplyr)
my_raw_dataset <- cleaningtools::cleaningtools_raw_data
my_kobo_survey <- cleaningtools::cleaningtools_survey
my_kobo_choice <- cleaningtools::cleaningtools_choices
#| output: false
my_log1 <- my_raw_dataset %>%
check_outliers(uuid_column = "X_uuid")
typeof(my_log1)
my_log1 %>%
names()
my_log1$potential_outliers %>%
head()
my_log2 <- my_raw_dataset %>%
check_duplicate(uuid_column = "X_uuid")
my_log2$duplicate_log %>%
head()
#| output: false
my_log3 <- my_raw_dataset %>%
check_outliers(uuid_column = "X_uuid") %>%
check_duplicate(uuid_column = "X_uuid")
names(my_log3)
my_log3$potential_outliers %>%
head()
my_log3$duplicate_log %>%
head()
#| output: false
more_logs <- my_raw_dataset %>%
check_duplicate(uuid_column = "X_uuid") %>%
check_soft_duplicates(uuid_column = "X_uuid", kobo_survey = my_kobo_survey, sm_separator = ".") %>%
check_outliers(uuid_column = "X_uuid") %>%
check_value(uuid_column = "X_uuid")
more_logs$checked_dataset <- more_logs$checked_dataset %>%
add_duration(uuid_column = "X_uuid", start_column = "X.U.FEFF.start", end_column = "end")
more_logs$checked_dataset[1:6, c("start_date", "start_time", "end_date", "end_time", "days_diff", "duration")]
more_logs <- more_logs %>%
check_duration(column_to_check = "duration", uuid_column = "X_uuid")
other_columns_to_check <- my_kobo_survey %>%
dplyr::filter(type == "text") %>%
dplyr::filter(name %in% names(my_raw_dataset)) %>%
dplyr::pull(name)
more_logs <- more_logs %>%
check_others(uuid_column = "X_uuid", columns_to_check = other_columns_to_check)
logical_check_list <- readxl::read_excel("inputs/01 - example - check_list.xlsx")
logical_check_list
example_logic <- my_raw_dataset %>%
check_logical_with_list(uuid_column = "X_uuid",
list_of_check = logical_check_list,
check_id_column = "check_id",
check_to_perform_column = "check_to_perform",
columns_to_clean_column = "columns_to_clean",
description_column = "description")
example_logic$logical_xx %>%
head()
example_logic$logical_all %>%
head()
example_logic$checked_dataset[1:6,tail(names(example_logic$checked_dataset))]
#| warning: false
library(addindicators)
library(dplyr)
my_data <- addindicators::addindicators_MSNA_template_data
my_data_with_fcs <- my_data %>% add_fcs(
cutoffs = "normal",
fsl_fcs_cereal = "fs_fcs_cereals_grains_roots_tubers",
fsl_fcs_legumes = "fs_fcs_beans_nuts",
fsl_fcs_veg = "fs_fcs_vegetables_leaves",
fsl_fcs_fruit = "fs_fcs_fruit",
fsl_fcs_meat = "fs_fcs_meat_fish_eggs",
fsl_fcs_dairy = "fs_fcs_dairy",
fsl_fcs_sugar = "fs_fcs_sugar",
fsl_fcs_oil = "fs_fcs_oil_fat_butter"
)
my_data_with_fcs[, tail(names(my_data_with_fcs), 10)] %>%
head()
my_data_with_indicators <- my_data %>%
add_fcs(
cutoffs = "normal",
fsl_fcs_cereal = "fs_fcs_cereals_grains_roots_tubers",
fsl_fcs_legumes = "fs_fcs_beans_nuts",
fsl_fcs_veg = "fs_fcs_vegetables_leaves",
fsl_fcs_fruit = "fs_fcs_fruit",
fsl_fcs_meat = "fs_fcs_meat_fish_eggs",
fsl_fcs_dairy = "fs_fcs_dairy",
fsl_fcs_sugar = "fs_fcs_sugar",
fsl_fcs_oil = "fs_fcs_oil_fat_butter"
) %>%
add_hhs(
)
my_data_with_indicators[, tail(names(my_data_with_indicators), 14)] %>%
head()
review_df <- addindicators_MSNA_template_data %>%
add_fcs(
cutoffs = "normal",
fsl_fcs_cereal = "fs_fcs_cereals_grains_roots_tubers",
fsl_fcs_legumes = "fs_fcs_beans_nuts",
fsl_fcs_veg = "fs_fcs_vegetables_leaves",
fsl_fcs_fruit = "fs_fcs_fruit",
fsl_fcs_meat = "fs_fcs_meat_fish_eggs",
fsl_fcs_dairy = "fs_fcs_dairy",
fsl_fcs_sugar = "fs_fcs_sugar",
fsl_fcs_oil = "fs_fcs_oil_fat_butter"
) %>%
select(uuid, fsl_fcs_score, fsl_fcs_cat)
binded_df <- my_data_with_indicators %>%
full_join(review_df, by = "uuid")
review_one_var <- review_variables(binded_df,
columns_to_review = "fsl_fcs_cat.x",
columns_to_compare_with = "fsl_fcs_cat.y")
review_one_var %>%
head()
review_one_var
review_one_var$review_table %>% head()
review_one_variable_jittered <- review_variables(jittered_df,
columns_to_review = "fsl_fcs_cat.x",
columns_to_compare_with = "fsl_fcs_cat.y")
jittered_df <- binded_df
set.seed(123)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.x"] <- sample(unique(jittered_df$fsl_fcs_cat.y), 5, T)
set.seed(124)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.y"] <- sample(unique(jittered_df$fsl_fcs_cat.y), 5, T)
set.seed(125)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.x"] <- NA
set.seed(1236)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.y"] <- NA
set.seed(1237)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_score.x"] <- sample(unique(jittered_df$fsl_fcs_score.x), 5, T)
review_one_variable_jittered <- review_variables(jittered_df,
columns_to_review = "fsl_fcs_cat.x",
columns_to_compare_with = "fsl_fcs_cat.y")
review_one_variable_jittered$review_table %>%
group_by(review_check_fsl_fcs_cat.x, review_comment_fsl_fcs_cat.x) %>%
tally()
review_one_var <- review_variables(binded_df,
columns_to_review = "fsl_fcs_cat.x",
columns_to_compare_with = "fsl_fcs_cat.y")
review_one_var %>%
names()
review_one_var$review_table %>%
head()
review_one_var$review_table %>%
group_by(review_check_fsl_fcs_cat.x, review_comment_fsl_fcs_cat.x) %>%
tally()
review_one_var$review_table %>%
head()
review_one_var$review_table %>%
group_by(review_check, review_comment) %>%
tally()
jittered_df <- binded_df
set.seed(123)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.x"] <- sample(unique(jittered_df$fsl_fcs_cat.y), 5, T)
set.seed(124)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.y"] <- sample(unique(jittered_df$fsl_fcs_cat.y), 5, T)
set.seed(125)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.x"] <- NA
set.seed(1236)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.y"] <- NA
set.seed(1237)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_score.x"] <- sample(unique(jittered_df$fsl_fcs_score.x), 5, T)
review_one_variable_jittered <- review_variables(jittered_df,
columns_to_review = "fsl_fcs_cat.x",
columns_to_compare_with = "fsl_fcs_cat.y")
review_one_variable_jittered$review_table %>% head()
review_one_variable_jittered <- review_variables(jittered_df,
columns_to_review = "fsl_fcs_cat.x",
columns_to_compare_with = "fsl_fcs_cat.y")
review_one_variable_jittered$review_table %>%
group_by(review_check, review_comment) %>%
tally()
review_one_variable_jittered$dataset[, tail(names(review_one_variable_jittered$dataset), 20)] %>%
head()
review_one_variable_jittered2 %>%
filter(!review_check_fsl_fcs_cat.x) %>%
select(uuid, fsl_fcs_cat.x, fsl_fcs_cat.y, review_check_fsl_fcs_cat.x, review_comment_fsl_fcs_cat.x)
review_one_variable_jittered$dataset %>%
filter(!review_check_fsl_fcs_cat.x) %>%
select(uuid, fsl_fcs_cat.x, fsl_fcs_cat.y, review_check_fsl_fcs_cat.x, review_comment_fsl_fcs_cat.x)
#| warning: false
library(cleaningtools)
library(dplyr)
my_raw_dataset <- cleaningtools::cleaningtools_raw_data
my_kobo_survey <- cleaningtools::cleaningtools_survey
my_kobo_choice <- cleaningtools::cleaningtools_choices
#| output: false
my_log1 <- my_raw_dataset %>%
check_outliers(uuid_column = "X_uuid")
typeof(my_log1)
my_log1 %>%
names()
my_log1$potential_outliers %>%
head()
my_log2 <- my_raw_dataset %>%
check_duplicate(uuid_column = "X_uuid")
my_log2$duplicate_log %>%
head()
#| output: false
my_log3 <- my_raw_dataset %>%
check_outliers(uuid_column = "X_uuid") %>%
check_duplicate(uuid_column = "X_uuid")
names(my_log3)
my_log3$potential_outliers %>%
head()
my_log3$duplicate_log %>%
head()
#| output: false
more_logs <- my_raw_dataset %>%
check_duplicate(uuid_column = "X_uuid") %>%
check_soft_duplicates(uuid_column = "X_uuid", kobo_survey = my_kobo_survey, sm_separator = ".") %>%
check_outliers(uuid_column = "X_uuid") %>%
check_value(uuid_column = "X_uuid")
more_logs$checked_dataset <- more_logs$checked_dataset %>%
add_duration(uuid_column = "X_uuid", start_column = "X.U.FEFF.start", end_column = "end")
more_logs$checked_dataset[1:6, c("start_date", "start_time", "end_date", "end_time", "days_diff", "duration")]
more_logs <- more_logs %>%
check_duration(column_to_check = "duration", uuid_column = "X_uuid")
other_columns_to_check <- my_kobo_survey %>%
dplyr::filter(type == "text") %>%
dplyr::filter(name %in% names(my_raw_dataset)) %>%
dplyr::pull(name)
more_logs <- more_logs %>%
check_others(uuid_column = "X_uuid", columns_to_check = other_columns_to_check)
logical_check_list <- readxl::read_excel("inputs/01 - example - check_list.xlsx")
logical_check_list
example_logic <- my_raw_dataset %>%
check_logical_with_list(uuid_column = "X_uuid",
list_of_check = logical_check_list,
check_id_column = "check_id",
check_to_perform_column = "check_to_perform",
columns_to_clean_column = "columns_to_clean",
description_column = "description")
example_logic$logical_all %>%
head()
my_raw_dataset %>%
dplyr::mutate(xxx =  primary_livelihood == "employment" & tot_expenses < 1000000) %>%
dplyr::select(X_uuid, xxx, primary_livelihood, tot_expenses) %>%
head()
example_logic$checked_dataset[1:6,tail(names(example_logic$checked_dataset))]
my_raw_dataset <- cleaningtools_raw_data
#| output: false
my_raw_dataset %>%
check_pii(uuid_column = "X_uuid")
#| output: false
my_raw_dataset <- my_raw_dataset %>%
add_percentage_missing(kobo_survey = my_kobo_survey)
my_raw_dataset %>%
check_percentage_missing(uuid_column = "X_uuid")
#| output: false
more_logs$checked_dataset <- more_logs$checked_dataset %>%
add_percentage_missing(kobo_survey = my_kobo_survey)
more_logs %>%
check_percentage_missing(uuid_column = "X_uuid")
?check_value
View(more_logs)
View(more_logs[["checked_dataset"]])
View(more_logs)
View(more_logs[["flaged_value"]])
?add_duration_from_audit()
?create_audit_list
View(more_logs)
logical_check_list <- readxl::read_excel("inputs/01 - example - check_list.xlsx")
logical_check_list <- readxl::read_excel("inputs/01 - example - check_list.xlsx")
logical_check_list
example_logic <- my_raw_dataset %>%
check_logical_with_list(uuid_column = "X_uuid",
list_of_check = logical_check_list,
check_id_column = "check_id",
check_to_perform_column = "check_to_perform",
columns_to_clean_column = "columns_to_clean",
description_column = "description")
View(example_logic)
View(example_logic[["checked_dataset"]])
View(more_logs)
previous_exercise_log <- readRDS("inputs/03 - exercise - previous_log.RDS")
View(previous_exercise_log)
previous_exercise_log <- readRDS("inputs/03 - exercise - previous_log.RDS")
previous_exercise_log %>% names()
library(cleaningtools)
previous_exercise_log <- readRDS("inputs/03 - exercise - previous_log.RDS")
previous_exercise_log %>% names()
library(dplyr)
??gapminder
install.packages("palmerpenguins")
library(palmerpenguins)
library(tidyverse)
penguins %>% head()
install.packages("treemapify")
library(treemapify)
library(treemapify)
ggplot(penguins, aes(area = value, fill = group)) +
geom_treemap()
penguins  %>% head()
ggplot(penguins, aes(area = species, fill = island)) +
geom_treemap()
penguins  %>%
group_by(species, island)
penguins  %>%
group_by(species, island) %>%
tally()
penguins  %>%
group_by(species, island) %>%
tally() %>%
ggplot(aes(area =n, fill = value, label = species, subgroup = island)) +
geom_treemap()
penguins  %>%
group_by(species, island) %>%
tally() %>%
ggplot(aes(area =n, fill = n, label = species, subgroup = island)) +
geom_treemap()
install.packages("ggmosaic")
??ggmosaic
?geom_mosaic
??geom_mosaic
data(titanic)
ggplot(data = titanic) +
geom_mosaic(aes(x = product(Class), fill = Survived))
data(titanic)
penguins %>% head()
ggplot(data = penguins) +
geom_mosaic(aes(x = product(species), fill = island))
library(ggmosaic)
ggplot(data = penguins) +
geom_mosaic(aes(x = product(species), fill = island))
ggplot(data = penguins) +
geom_mosaic(aes(x = product(island), fill = species))
?quarto::quarto_render()
?add_fcs
??add_fcs
params$results_table_path
?presentresults::create_ipctwg_table
