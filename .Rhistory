select(analysis_type, analysis_var, stat, n, n_total, analysis_key)
create_analysis_ratio(me_design,
analysis_var_numerator = "num_attending",
analysis_var_denominator = "num_children",
numerator_NA_to_0 = FALSE) %>%
select(analysis_type, analysis_var, stat, n, n_total, analysis_key)
create_analysis_ratio(me_design,
analysis_var_numerator = "num_attending",
analysis_var_denominator = "num_children",
filter_denominator_0 = FALSE)  %>%
select(analysis_type, analysis_var, stat, n, n_total, analysis_key)
my_loa_for_review <- my_results_with_ratio$results_table %>%
create_loa_from_results()
my_loa_for_review
#| output: false
my_design_for_review <- srvyr::as_survey_design(my_data, weights = "weights", strata = "admin1")
analysis_for_review <- create_analysis(my_design_for_review, my_loa_for_review, sm_separator = "/")
binded_table <- my_results_with_ratio$results_table %>%
left_join(analysis_for_review$results_table, by = "analysis_key")
my_review <- review_analysis(binded_table)
typeof(my_review)
names(my_review)
my_review$review_table %>%
head()
my_review$review_table %>%
group_by(stat, review_check, review_comment) %>%
tally()
jittered_results_table <- binded_table
set.seed(123)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.x"] <- sample(unique(jittered_results_table$stat.x), 5, T)
set.seed(124)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.y"] <- sample(unique(jittered_results_table$stat.y), 5, T)
set.seed(125)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.x"] <- NA
set.seed(1236)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.y"] <- NA
my_jittered_review <- review_analysis(jittered_results_table,
stat_columns_to_review = "stat.x",
stat_columns_to_compare_with = "stat.y")
my_jittered_review$review_table %>%
group_by(stat, review_check, review_comment) %>%
tally()
my_jittered_review$results_table %>%
filter(!review_check_stat.x) %>%
head(10)
#| echo: false
analysistools_MSNA_template_survey %>%
filter(name %in% c("wash_soap", "wash_drinkingwatersource", "health_barriers", "income_v2_total", "expenditure_health", "rCSIMealAdult")) %>%
select(name, `label::english`, type) %>%
mutate(`label::english` = case_when(`label::english` == "${health_barriers_question_select}" ~ "What are your barriers to access health care?",
TRUE ~ `label::english`))
exercise_data <- analysistools::analysistools_MSNA_template_data
exercise_sampling_frame <- data.frame(
strata = c("admin1a", "admin1b", "admin1c"),
population = c(100000, 200000, 300000)
)
template_loa <- readxl::read_excel("inputs/08 - exercise - template loa.xlsx")
#| output: false
exercise_data <- exercise_data %>%
add_weights(
exercise_sampling_frame,
"admin1", "strata", "population"
)
exercise_design <- srvyr::as_survey_design(exercise_data, weights = "weights", strata = "admin1")
exercise_loa <- readxl::read_excel("inputs/09 - correction - loa.xlsx")
exercise_results <- create_analysis(exercise_design, loa = exercise_loa, sm_separator = "/")
analysis_to_review <- readxl::read_excel("inputs/10 - exercise - analysis_to_review.xlsx")
dataset_to_review <- readxl::read_excel("inputs/10 - exercise - analysis_to_review.xlsx", sheet = "dataset")
loa_for_review <- analysis_to_review %>%
create_loa_from_results()
review_design <- srvyr::as_survey_design(dataset_to_review, strata = "admin1")
my_analysis_exercise <- create_analysis(review_design, loa = loa_for_review, sm_separator = "/")
analysis_to_review <- analysis_to_review %>%
mutate(analysis_key2 = stringr::str_replace_all("~/~", "%/%"))
analysis_to_review <- analysis_to_review %>%
mutate(analysis_key2 = stringr::str_replace_all(analysis_key, "~/~", "%/%"))
View(analysis_to_review)
analysis_to_review %>% writexl::write_xlsx("hello.xlsx")
loa_for_review <- analysis_to_review2 %>%
create_loa_from_results()
loa_for_review <- analysis_to_review %>%
create_loa_from_results(analysis_key_column = "analysis_key2")
review_design <- srvyr::as_survey_design(dataset_to_review, strata = "admin1")
my_analysis_exercise <- create_analysis(review_design, loa = loa_for_review, sm_separator = "/")
my_results_table_shorter <- my_analysis_exercise$results_table %>%
select(analysis_key, stat)
binded_results_table <- analysis_to_review %>%
full_join(my_results_table_shorter, by = "analysis_key")
exercise_review <- review_analysis(binded_results_table,
stat_columns_to_review = "stat.x",
stat_columns_to_compare_with = "stat.y")
exercise_review$review_table %>%
group_by(review_check,review_comment) %>%
tally()
exercise_review <- review_analysis(binded_results_table,
stat_columns_to_review = "stat.x",
stat_columns_to_compare_with = "stat.y",
analysis_key_column = "analysis_key2")
binded_results_table <- analysis_to_review %>%
full_join(my_results_table_shorter, by = "analysis_key")
exercise_review <- review_analysis(binded_results_table,
stat_columns_to_review = "stat.x",
stat_columns_to_compare_with = "stat.y",
analysis_key_column = "analysis_key2")
binded_results_table <- analysis_to_review %>%
full_join(my_results_table_shorter, by = "analysis_key2"="analysis_key")
binded_results_table <- analysis_to_review %>%
full_join(my_results_table_shorter, by = c("analysis_key2"="analysis_key"))
exercise_review <- review_analysis(binded_results_table,
stat_columns_to_review = "stat.x",
stat_columns_to_compare_with = "stat.y",
analysis_key_column = "analysis_key2")
exercise_review$review_table %>%
group_by(review_check,review_comment) %>%
tally()
analysis_to_review <- readxl::read_excel("inputs/10 - exercise - analysis_to_review.xlsx")
dataset_to_review <- readxl::read_excel("inputs/10 - exercise - analysis_to_review.xlsx", sheet = "dataset")
loa_for_review <- analysis_to_review %>%
create_loa_from_results()
review_design <- srvyr::as_survey_design(dataset_to_review, strata = "admin1")
my_analysis_exercise <- create_analysis(review_design, loa = loa_for_review, sm_separator = "/")
my_results_table_shorter <- my_analysis_exercise$results_table %>%
select(analysis_key, stat)
binded_results_table <- analysis_to_review %>%
full_join(my_results_table_shorter, by = "analysis_key")
exercise_review <- review_analysis(binded_results_table,
stat_columns_to_review = "stat.x",
stat_columns_to_compare_with = "stat.y",
analysis_key_column = "analysis_key2")
loa_for_review <- analysis_to_review %>%
create_loa_from_results()
review_design <- srvyr::as_survey_design(dataset_to_review, strata = "admin1")
my_analysis_exercise <- create_analysis(review_design, loa = loa_for_review, sm_separator = "/")
my_results_table_shorter <- my_analysis_exercise$results_table %>%
select(analysis_key, stat)
binded_results_table <- analysis_to_review %>%
full_join(my_results_table_shorter, by = "analysis_key")
exercise_review <- review_analysis(binded_results_table,
stat_columns_to_review = "stat.x",
stat_columns_to_compare_with = "stat.y",
analysis_key_column = "analysis_key")
exercise_review$review_table %>%
group_by(review_check,review_comment) %>%
tally()
library(presentresults)
my_results_table <- my_results$results_table
my_results_table %>%
create_table_group_x_variable() %>%
create_xlsx_group_x_variable(file_path = "outputs/04 - example - group_x_variable.xlsx", overwrite = T)
my_results_table %>%
create_table_variable_x_group() %>%
create_xlsx_variable_x_group(file_path = "outputs/05 - example - variable_x_group.xlsx", overwrite = T)
exercise_outputs <- readxl::read_excel("inputs/10 - exercise - analysis_to_review.xlsx")
#| output: false
exercise_outputs %>%
create_table_group_x_variable() %>%
create_xlsx_group_x_variable(file_path = "outputs/06 - correction - group_x_variable_table.xlsx", overwrite = T)
#| warning: false
library(analysistools)
library(dplyr)
my_data <- analysistools::analysistools_MSNA_template_data
sampling_frame <- data.frame(
strata = c("admin1a", "admin1b", "admin1c"),
population = c(100000, 200000, 300000)
)
set.seed(1323)
my_data <- my_data |>
mutate(num_aged_school_children = round(runif(100, min = 0, max = 5)),
num_enrolled_school_children = round(runif(100, min = 0, max = 5)),
num_enrolled_school_children = case_when(num_aged_school_children == 0 ~ NA, num_aged_school_children < num_enrolled_school_children ~ num_aged_school_children,
TRUE ~ num_enrolled_school_children
))
my_loa <- analysistools::analysistools_MSNA_template_loa
my_loa
#| output: false
my_data <- my_data %>%
add_weights(sampling_frame, "admin1", "strata", "population")
my_design <- srvyr::as_survey_design(my_data, weights = "weights", strata = "admin1")
my_results <- create_analysis(my_design, loa = my_loa, sm_separator = "/")
View(my_results)
my_results %>% writexl::write_xlsx("C:\Users\Yann SAY\Desktop\git\quarto\dev\reach_tabular_html\inputs/results_outputs.xlsx")
my_results %>% writexl::write_xlsx("C:/Users/Yann SAY/Desktop/git/quarto/dev/reach_tabular_html/inputs/results_outputs.xlsx")
#| warning: false
library(cleaningtools)
library(dplyr)
my_raw_dataset <- cleaningtools::cleaningtools_raw_data
my_kobo_survey <- cleaningtools::cleaningtools_survey
my_kobo_choice <- cleaningtools::cleaningtools_choices
#| warning: false
library(cleaningtools)
library(dplyr)
my_raw_dataset <- cleaningtools::cleaningtools_raw_data
my_kobo_survey <- cleaningtools::cleaningtools_survey
my_kobo_choice <- cleaningtools::cleaningtools_choices
#| output: false
more_logs <- my_raw_dataset %>%
check_duplicate(uuid_column = "X_uuid") %>%
check_soft_duplicates(uuid_column = "X_uuid", kobo_survey = my_kobo_survey, sm_separator = ".") %>%
check_outliers(uuid_column = "X_uuid") %>%
check_value(uuid_column = "X_uuid")
more_logs$checked_dataset <- more_logs$checked_dataset %>%
add_duration(uuid_column = "X_uuid", start_column = "X.U.FEFF.start", end_column = "end")
more_logs <- more_logs %>%
check_duration(column_to_check = "duration", uuid_column = "X_uuid")
other_columns_to_check <- my_kobo_survey %>%
filter(type == "text") %>%
filter(name %in% names(my_raw_dataset)) %>%
pull(name)
more_logs <- more_logs %>%
check_others(uuid_column = "X_uuid", columns_to_check = other_columns_to_check)
logical_check_list <- readxl::read_excel("inputs/01 - example - check_list.xlsx")
more_logs <- more_logs %>%
check_logical_with_list(uuid_column = "X_uuid",
list_of_check = logical_check_list,
check_id_column = "check_id",
check_to_perform_column = "check_to_perform",
columns_to_clean_column = "columns_to_clean",
description_column = "description")
names(more_logs)
my_combined_log <- create_combined_log(more_logs)
typeof(my_combined_log)
names(my_combined_log)
my_combined_log$cleaning_log %>%
head()
my_combined_log <- my_combined_log %>%
add_info_to_cleaning_log(dataset_uuid_column = "X_uuid",
information_to_add = "enumerator_num")
my_combined_log$cleaning_log %>%
head()
#| output: false
create_xlsx_cleaning_log(my_combined_log,
sm_dropdown_type = "logical",
output_path =  "outputs/01 - example - cleaning-log-no-kobo.xlsx")
#| output: false
create_xlsx_cleaning_log(my_combined_log,
kobo_survey = my_kobo_survey,
kobo_choices = my_kobo_choice,
use_dropdown = T,
sm_dropdown_type = "logical",
output_path =  "outputs/02 - example - cleaning-log-with-kobo.xlsx")
my_filled_log <- readxl::read_excel("inputs/02 - example - cleaning-log-with-kobo - filled.xlsx", sheet = 2)
#| warning: false
library(cleaningtools)
library(dplyr)
my_raw_dataset <- cleaningtools::cleaningtools_raw_data
my_kobo_survey <- cleaningtools::cleaningtools_survey
my_kobo_choice <- cleaningtools::cleaningtools_choices
#| output: false
more_logs <- my_raw_dataset %>%
check_duplicate(uuid_column = "X_uuid") %>%
check_soft_duplicates(uuid_column = "X_uuid", kobo_survey = my_kobo_survey, sm_separator = ".") %>%
check_outliers(uuid_column = "X_uuid") %>%
check_value(uuid_column = "X_uuid")
more_logs$checked_dataset <- more_logs$checked_dataset %>%
add_duration(uuid_column = "X_uuid", start_column = "X.U.FEFF.start", end_column = "end")
more_logs <- more_logs %>%
check_duration(column_to_check = "duration", uuid_column = "X_uuid")
other_columns_to_check <- my_kobo_survey %>%
filter(type == "text") %>%
filter(name %in% names(my_raw_dataset)) %>%
pull(name)
more_logs <- more_logs %>%
check_others(uuid_column = "X_uuid", columns_to_check = other_columns_to_check)
logical_check_list <- readxl::read_excel("inputs/01 - example - check_list.xlsx")
more_logs <- more_logs %>%
check_logical_with_list(uuid_column = "X_uuid",
list_of_check = logical_check_list,
check_id_column = "check_id",
check_to_perform_column = "check_to_perform",
columns_to_clean_column = "columns_to_clean",
description_column = "description")
names(more_logs)
my_combined_log <- create_combined_log(more_logs)
typeof(my_combined_log)
names(my_combined_log)
my_combined_log$cleaning_log %>%
head()
my_combined_log <- my_combined_log %>%
add_info_to_cleaning_log(dataset_uuid_column = "X_uuid",
information_to_add = "enumerator_num")
my_combined_log$cleaning_log %>%
head()
#| output: false
create_xlsx_cleaning_log(my_combined_log,
sm_dropdown_type = "logical",
output_path =  "outputs/01 - example - cleaning-log-no-kobo.xlsx")
#| output: false
create_xlsx_cleaning_log(my_combined_log,
kobo_survey = my_kobo_survey,
kobo_choices = my_kobo_choice,
use_dropdown = T,
sm_dropdown_type = "logical",
output_path =  "outputs/02 - example - cleaning-log-with-kobo.xlsx")
my_filled_log <- readxl::read_excel("inputs/02 - example - cleaning-log-with-kobo - filled.xlsx", sheet = 2)
check_log_results <- review_cleaning_log(raw_dataset = my_raw_dataset,
raw_data_uuid_column = "X_uuid",
cleaning_log = my_filled_log,
cleaning_log_uuid_column = "uuid",
cleaning_log_question_column = "question",
cleaning_log_new_value_column = "new_value",
cleaning_log_change_type_column = "change_type",
change_response_value = "change_response")
check_log_results
my_clean_data <- create_clean_data(raw_dataset = my_raw_dataset,
raw_data_uuid_column = "X_uuid",
cleaning_log = my_filled_log,
cleaning_log_uuid_column = "uuid",
cleaning_log_question_column = "question",
cleaning_log_new_value_column = "new_value",
cleaning_log_change_type_column = "change_type")
my_filled_log %>%
filter(question == "primary_livelihood.employment",
change_type == "change_response") %>%
select(uuid, question, old_value, new_value)
my_clean_data %>%
filter(X_uuid %in% c("eb3b9935-fa0b-4d54-8058-3b629f1421ad", "eec1f630-15d5-475e-a344-32bba74b32ea", "f1175d29-ce1f-43a7-b3d1-ee26cd1b8cdb")) %>%
select(X_uuid,primary_livelihood, primary_livelihood.employment)
#| output: false
my_clean_data2 <- recreate_parent_column(dataset = my_clean_data,
uuid_column = "X_uuid",
kobo_survey = my_kobo_survey,
kobo_choices = my_kobo_choice,
sm_separator = ".",
cleaning_log_to_append = my_filled_log)
my_clean_data2$data_with_fix_concat %>%
filter(X_uuid %in% c("eb3b9935-fa0b-4d54-8058-3b629f1421ad", "eec1f630-15d5-475e-a344-32bba74b32ea", "f1175d29-ce1f-43a7-b3d1-ee26cd1b8cdb")) %>%
select(X_uuid,primary_livelihood, primary_livelihood.employment)
my_clean_data2$cleaning_log %>%
filter(question == "primary_livelihood",
uuid %in% c("eb3b9935-fa0b-4d54-8058-3b629f1421ad", "eec1f630-15d5-475e-a344-32bba74b32ea", "f1175d29-ce1f-43a7-b3d1-ee26cd1b8cdb")) %>%
select(uuid, question, old_value, new_value)
my_filled_log %>%
filter(question == "water_supply_other_neighbourhoods_why",
change_type == "blank_response")
my_kobo_survey %>%
filter(name == "water_supply_other_neighbourhoods_why") %>%
select(type, name, relevant)
my_clean_data %>%
filter(X_uuid == "019bc718-c06a-46b8-bba8-c84f6c6efbd5") %>%
select(water_supply_other_neighbourhoods, water_supply_other_neighbourhoods_why	)
review_other_log  %>% View()
review_other_log <- review_others(dataset = my_clean_data2$data_with_fix_concat,
uuid_column = "X_uuid",
kobo_survey = my_kobo_survey,
columns_not_to_check = "consent_telephone_number")
View(review_other_log)
library(presentresults)
my_results_table <- my_results$results_table
#| warning: false
library(analysistools)
library(dplyr)
my_data <- analysistools::analysistools_MSNA_template_data
sampling_frame <- data.frame(
strata = c("admin1a", "admin1b", "admin1c"),
population = c(100000, 200000, 300000)
)
set.seed(1323)
my_data <- my_data |>
mutate(num_aged_school_children = round(runif(100, min = 0, max = 5)),
num_enrolled_school_children = round(runif(100, min = 0, max = 5)),
num_enrolled_school_children = case_when(num_aged_school_children == 0 ~ NA, num_aged_school_children < num_enrolled_school_children ~ num_aged_school_children,
TRUE ~ num_enrolled_school_children
))
my_loa <- analysistools::analysistools_MSNA_template_loa
my_loa
#| output: false
my_data <- my_data %>%
add_weights(sampling_frame, "admin1", "strata", "population")
my_design <- srvyr::as_survey_design(my_data, weights = "weights", strata = "admin1")
my_results <- create_analysis(my_design, loa = my_loa, sm_separator = "/")
head_results_table <- my_results$results_table %>%
head(5)
tail_results_table <- my_results$results_table %>%
tail(5)
rbind(head_results_table,tail_results_table)
my_loa_with_ratio <- read.csv("inputs/07 - example - loa_with_ratio.csv")
my_loa_with_ratio %>%
filter(analysis_type == "ratio") |>
select(analysis_type, analysis_var, group_var, analysis_var_numerator, analysis_var_denominator)
#| output: false
my_results_with_ratio <- create_analysis(my_design, loa = my_loa_with_ratio, sm_separator = "/")
my_results_with_ratio$results_table %>%
filter(analysis_type == "ratio")
school_ex <- data.frame(
hh = c("hh1", "hh2", "hh3", "hh4"),
num_children = c(3, 0, 2, NA),
num_enrolled = c(3, NA, 0, NA),
num_attending = c(1, NA, NA, NA)
)
me_design <- srvyr::as_survey(school_ex)
school_ex
create_analysis_ratio(me_design,
analysis_var_numerator = "num_attending",
analysis_var_denominator = "num_children") %>%
select(analysis_type, analysis_var, stat, n, n_total, analysis_key)
create_analysis_ratio(me_design,
analysis_var_numerator = "num_attending",
analysis_var_denominator = "num_children",
numerator_NA_to_0 = FALSE) %>%
select(analysis_type, analysis_var, stat, n, n_total, analysis_key)
create_analysis_ratio(me_design,
analysis_var_numerator = "num_attending",
analysis_var_denominator = "num_children",
filter_denominator_0 = FALSE)  %>%
select(analysis_type, analysis_var, stat, n, n_total, analysis_key)
my_loa_for_review <- my_results_with_ratio$results_table %>%
create_loa_from_results()
my_loa_for_review
#| output: false
my_design_for_review <- srvyr::as_survey_design(my_data, weights = "weights", strata = "admin1")
analysis_for_review <- create_analysis(my_design_for_review, my_loa_for_review, sm_separator = "/")
binded_table <- my_results_with_ratio$results_table %>%
left_join(analysis_for_review$results_table, by = "analysis_key")
my_review <- review_analysis(binded_table)
typeof(my_review)
names(my_review)
my_review$review_table %>%
head()
my_review$review_table %>%
group_by(stat, review_check, review_comment) %>%
tally()
jittered_results_table <- binded_table
set.seed(123)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.x"] <- sample(unique(jittered_results_table$stat.x), 5, T)
set.seed(124)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.y"] <- sample(unique(jittered_results_table$stat.y), 5, T)
set.seed(125)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.x"] <- NA
set.seed(1236)
jittered_results_table[sample(1:nrow(jittered_results_table), 5), "stat.y"] <- NA
my_jittered_review <- review_analysis(jittered_results_table,
stat_columns_to_review = "stat.x",
stat_columns_to_compare_with = "stat.y")
my_jittered_review$review_table %>%
group_by(stat, review_check, review_comment) %>%
tally()
my_jittered_review$results_table %>%
filter(!review_check_stat.x) %>%
head(10)
#| echo: false
analysistools_MSNA_template_survey %>%
filter(name %in% c("wash_soap", "wash_drinkingwatersource", "health_barriers", "income_v2_total", "expenditure_health", "rCSIMealAdult")) %>%
select(name, `label::english`, type) %>%
mutate(`label::english` = case_when(`label::english` == "${health_barriers_question_select}" ~ "What are your barriers to access health care?",
TRUE ~ `label::english`))
exercise_data <- analysistools::analysistools_MSNA_template_data
exercise_sampling_frame <- data.frame(
strata = c("admin1a", "admin1b", "admin1c"),
population = c(100000, 200000, 300000)
)
template_loa <- readxl::read_excel("inputs/08 - exercise - template loa.xlsx")
#| output: false
exercise_data <- exercise_data %>%
add_weights(
exercise_sampling_frame,
"admin1", "strata", "population"
)
exercise_design <- srvyr::as_survey_design(exercise_data, weights = "weights", strata = "admin1")
exercise_loa <- readxl::read_excel("inputs/09 - correction - loa.xlsx")
exercise_results <- create_analysis(exercise_design, loa = exercise_loa, sm_separator = "/")
analysis_to_review <- readxl::read_excel("inputs/10 - exercise - analysis_to_review.xlsx")
dataset_to_review <- readxl::read_excel("inputs/10 - exercise - analysis_to_review.xlsx", sheet = "dataset")
loa_for_review <- analysis_to_review %>%
create_loa_from_results()
review_design <- srvyr::as_survey_design(dataset_to_review, strata = "admin1")
my_analysis_exercise <- create_analysis(review_design, loa = loa_for_review, sm_separator = "/")
my_results_table_shorter <- my_analysis_exercise$results_table %>%
select(analysis_key, stat)
binded_results_table <- analysis_to_review %>%
full_join(my_results_table_shorter, by = "analysis_key")
exercise_review <- review_analysis(binded_results_table,
stat_columns_to_review = "stat.x",
stat_columns_to_compare_with = "stat.y",
analysis_key_column = "analysis_key")
exercise_review$review_table %>%
group_by(review_check,review_comment) %>%
tally()
library(presentresults)
my_results_table <- my_results$results_table
View(my_results_table)
my_results_table %>%
create_table_group_x_variable() %>%
create_xlsx_group_x_variable(file_path = "outputs/04 - example - group_x_variable.xlsx", overwrite = T)
my_results_table %>%
create_table_group_x_variable(value_columns = "stat") %>%
create_xlsx_group_x_variable(file_path = "outputs/04 - example - group_x_variable.xlsx", overwrite = T)
my_results_table %>%
create_table_group_x_variable(value_columns = c("stat", "n","n_total", "n_w")) %>%
create_xlsx_group_x_variable(file_path = "outputs/04 - example - group_x_variable.xlsx", overwrite = T)
my_results_table %>%
create_table_variable_x_group(value_columns = c("stat", "n")) %>%
create_xlsx_variable_x_group(file_path = "outputs/05 - example - variable_x_group.xlsx", overwrite = T)
my_results_table %>%
create_table_variable_x_group(value_columns = c("stat", "n")) %>%
create_xlsx_variable_x_group(file_path = "outputs/05 - example - variable_x_group.xlsx", overwrite = T, value_columns = c("stats", "n"))
my_results_table %>%
create_table_group_x_variable(value_columns = c("stat", "n","n_total", "n_w")) -> xx
View(xx)
my_results_table_new <- my_results_table %>%
select(stat, analysis_key)
my_results_table_new %>%
create_table_group_x_variable() %>%
create_xlsx_group_x_variable(file_path = "outputs/example.xlsx")
my_results_table_new %>%
create_table_group_x_variable(value_columns = "stat") %>%
create_xlsx_group_x_variable(file_path = "outputs/example.xlsx")
my_results_table_new %>% View()
my_results_table_new %>%
create_table_group_x_variable(value_columns = "stat") %>%
create_xlsx_group_x_variable(file_path = "outputs/example2.xlsx")
my_results_table_new %>%
create_analysis_key_table() %>% View()
