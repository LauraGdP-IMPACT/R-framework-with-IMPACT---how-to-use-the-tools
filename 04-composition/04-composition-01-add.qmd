---
title: "02 - R framework with IMPACT - session 2"
author: "Yann Say"
date: last-modified

---
# Composition - adding indicators

The framework is built around 4 steps: cleaning, composition, analysis, outputs

-   *Cleaning*: any manipulation to go from the raw data to the clean data
-   *Composition*: any manipulation before the analysis e.g. adding indicators, adding information from loop or main, aok aggregation, etc.
-   *Analysis*: any manipulation regarding only the analysis
-   *Outputs*: any manipulation to format the outputs.

The following section will present some introduction about the composition.

![](../config/images/step - composition.png)

```{r}
#| warning: false
library(impactR4PHU)
library(dplyr)

my_data <- impactR4PHU::impactR4PHU_data_template |>  
  filter(respondent_consent != "no") 
```

::: {.callout-tip appearance="minimal"}
### add\_\*

![](../config/images/verb - add.png)

**add_**\* functions will add a variable (column) to the dataset. For example, to add the duration of a survey, to add the food consumption score category, etc.

**add_**\* function takes a dataset as input and returns the dataset + the new indicator (and any intermediate steps used for the calculation). 

For example, to check the duration of a survey, there is only the start and end, but not the duration column.

With `addindicators` some intermediate columns can be added if they are used to create the new indicator.
:::

## add_fcs

```{r}
my_data_with_fcs <- my_data %>% add_fcs(
  cutoffs = "normal"
)

my_data_with_fcs[, tail(names(my_data_with_fcs), 10)] %>%
  head()
```
::: {.callout-note .column-margin}
You can learn more about food security indicators [here](https://fscluster.org/handbook/).
:::

## add_hhs

::: {.callout-tip appearance="minimal"}
### Pipe-able

The framework is built around 2 adjectives, **pipe-able** and **independent**. In the framework, functions of the same family should be pipe-able. In the following case, 2 **add\_**\* functions are piped.
:::


```{r}
my_data_with_indicators <- my_data %>%
  add_fcs(
  cutoffs = "normal"
) %>%
  add_hhs(
  )

my_data_with_indicators[, tail(names(my_data_with_indicators), 14)] %>%
  head()
```

# Composition - reviewing indicators

Reviewing indicators will compare 2 indicators together and present the differences. It will not check how the indicator was created nor check for inconsistencies. That mean, to review an indicator, it is necessary to create one and compare them. The functions `review_one_variable` and `review_variables` will focus on the latter.

## review_variables

First, a new dataset can be created for the review.
```{r}
review_df <- my_data %>%
  add_fcs(
  cutoffs = "normal",
  ) %>%
  select(uuid, fsl_fcs_score, fsl_fcs_cat)
```

Then the dataset to be reviewed and the new dataset can be binded together.

```{r}
binded_df <- my_data_with_indicators %>%
  full_join(review_df, by = "uuid")
```

::: {.callout-note .column-margin}
I would advice to use a `full_join` rather than a `left/right_join`. That way if any computation has missing value they will be spotted.
:::

::: {.callout-note .column-margin}
With the `join_*` if the names are the same .x and .y will added to the names.
:::

::: {.callout-tip appearance="minimal"}
### review\_\*

![](../config/images/verb - review.png)

**review_**\* functions will review an object by comparing it to standards or another object and flags differences, e.g. reviewing the cleaning by comparing the raw dataset, the clean dataset and the cleaning log, analysis comparing it with another analysis. 
:::

```{r}
library(addindicators)
```

```{r}
review_one_var <- review_variables(binded_df,
  columns_to_review = "fsl_fcs_cat.x",
  columns_to_compare_with = "fsl_fcs_cat.y")


review_one_var %>% 
  names()
```
It is a list with the dataset and a review table.

```{r}
review_one_var$review_table %>% 
  head()
```

The review table can be summarised to have a quicker overview.

```{r}
review_one_var$review_table %>%
  group_by(review_check, review_comment) %>%
  tally()
```

To see how differences are shown, some noise is introduced to the dataset.

```{r}
jittered_df <- binded_df
set.seed(123)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.x"] <- sample(unique(jittered_df$fsl_fcs_cat.y), 5, T)
set.seed(124)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.y"] <- sample(unique(jittered_df$fsl_fcs_cat.y), 5, T)
set.seed(125)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.x"] <- NA
set.seed(1236)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.y"] <- NA
set.seed(1237)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_score.x"] <- sample(unique(jittered_df$fsl_fcs_score.x), 5, T)
```

```{r}
review_one_variable_jittered <- review_variables(jittered_df,
  columns_to_review = "fsl_fcs_cat.x",
  columns_to_compare_with = "fsl_fcs_cat.y")

review_one_variable_jittered$review_table %>%
  group_by(review_check, review_comment) %>%
  tally()
```

The dataset has new columns to help filtering for further investigation.

```{r}
review_one_variable_jittered$dataset[, tail(names(review_one_variable_jittered$dataset), 5)] %>%
  head()
```
```{r}
review_one_variable_jittered$dataset %>%
  filter(!review_check_fsl_fcs_cat.x) %>%
  select(uuid, fsl_fcs_cat.x, fsl_fcs_cat.y, review_check_fsl_fcs_cat.x, review_comment_fsl_fcs_cat.x)
```


If there are more than one variable to review, pair-wise vectors can be used.

```{r}
my_review <- review_variables(jittered_df,
  columns_to_review = c("fsl_fcs_cat.x", "fsl_fcs_score.x"),
  columns_to_compare_with = c("fsl_fcs_cat.y", "fsl_fcs_score.y")
)
```

```{r}
my_review$review_table %>%
  group_by(variable, review_check, review_comment) %>%
  tally()
```
```{r}
my_review$dataset %>%
  filter(!review_check_fsl_fcs_cat.x) %>%
  select(uuid, fsl_fcs_cat.x, fsl_fcs_cat.y, review_comment_fsl_fcs_cat.x)
```
```{r}
my_review$dataset %>%
  filter(!review_check_fsl_fcs_score.x) %>%
  select(uuid, fsl_fcs_score.x, fsl_fcs_score.y, review_comment_fsl_fcs_score.x)
```


# Exercises 

## Exercise 1

- Add the **food consumption matrix score** to the dataset. The food consumption matrix score is a food security indicator that uses the **food consumption score**, **household hunger score** and the **reduced coping strategy index**.

```{r}
#| echo: false
names_to_keep <- grep("rCSI", analysistools::analysistools_MSNA_template_survey$name, value = T)
analysistools::analysistools_MSNA_template_survey %>% 
  filter(name %in% names_to_keep,
         name != "rCSI_module") %>% 
  select(name, `label::english`, type) 
```

```{r}
#| eval: false
library(impactR4PHU)
library(addindicators)
library(dplyr)
```

```{r}
exercise_data <- addindicators::addindicators_MSNA_template_data %>%
  add_fcs(
  cutoffs = "normal",
  fsl_fcs_cereal = "fs_fcs_cereals_grains_roots_tubers",
  fsl_fcs_legumes = "fs_fcs_beans_nuts",
  fsl_fcs_veg = "fs_fcs_vegetables_leaves",
  fsl_fcs_fruit = "fs_fcs_fruit",
  fsl_fcs_meat = "fs_fcs_meat_fish_eggs",
  fsl_fcs_dairy = "fs_fcs_dairy",
  fsl_fcs_sugar = "fs_fcs_sugar",
  fsl_fcs_oil = "fs_fcs_oil_fat_butter"
  ) %>%
  add_hhs(
  fsl_hhs_nofoodhh = "fs_hhs_nofood_yn",
  fsl_hhs_nofoodhh_freq = "fs_hhs_nofood_freq",
  fsl_hhs_sleephungry = "fs_hhs_sleephungry_yn",
  fsl_hhs_sleephungry_freq = "fs_hhs_sleephungry_freq",
  fsl_hhs_alldaynight = "fs_hhs_daynoteating_yn",
  fsl_hhs_alldaynight_freq = "fs_hhs_daynoteating_freq",
  yes_answer = "yes",
  no_answer = "no",
  rarely_answer = "rarely_1_2",
  sometimes_answer = "sometimes_3_10",
  often_answer = "often_10_times"
  )
```

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

Did you try the function `add_fcm_phase`?
:::

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

The food consumption matrix needs 3 indicators, FCS, rCSI, HHS.
:::

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

Have you used the correct HHS category variable?
:::

::: {.callout-tip collapse="true" appearance="minimal"}
### Expand to get the answer

```{r}
#| output: false
my_answer <- exercise_data %>% 
  add_rcsi(
    fsl_rcsi_lessquality = "rCSILessQlty",
    fsl_rcsi_borrow = "rCSIBorrow",
    fsl_rcsi_mealsize = "rCSIMealSize",
    fsl_rcsi_mealadult = "rCSIMealAdult",
    fsl_rcsi_mealnb = "rCSIMealNb"
  ) %>%
  add_fcm_phase(
  )
```
:::

## Exercise 2

- You receive a dataset, you need to review the following four indicators.

  - Food Consumption Score: **fsl_fcs_score**, **fsl_fcs_cat**
  - Household Hunger Score: **hhs_score**, **hhs_cat**
  
Don't forget to write the review.

```{r}
dataset_to_review <- read.csv("../inputs/06 - exercise - dataset_to_review.csv")

dataset_without_indicators <- addindicators::addindicators_MSNA_template_data
```

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

Did you try the function `review_variables`
:::

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

How was the FSC created?
:::

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

How was coded the category for the HHS? 
Names in the dataset are: "hhs_cat", "hhs_score"
Names created with `add_hhs` are: "fsl_hhs_cat", "fsl_hhs_score"
:::

::: {.callout-tip collapse="true" appearance="minimal"}
### Expand to get the answer

```{r}
#| output: false
my_review <- dataset_without_indicators %>% 
  add_fcs(
  cutoffs = "normal",
  fsl_fcs_cereal = "fs_fcs_cereals_grains_roots_tubers",
  fsl_fcs_legumes = "fs_fcs_beans_nuts",
  fsl_fcs_veg = "fs_fcs_vegetables_leaves",
  fsl_fcs_fruit = "fs_fcs_fruit",
  fsl_fcs_meat = "fs_fcs_meat_fish_eggs",
  fsl_fcs_dairy = "fs_fcs_dairy",
  fsl_fcs_sugar = "fs_fcs_sugar",
  fsl_fcs_oil = "fs_fcs_oil_fat_butter"
  ) %>%
  add_hhs(
  fsl_hhs_nofoodhh = "fs_hhs_nofood_yn",
  fsl_hhs_nofoodhh_freq = "fs_hhs_nofood_freq",
  fsl_hhs_sleephungry = "fs_hhs_sleephungry_yn",
  fsl_hhs_sleephungry_freq = "fs_hhs_sleephungry_freq",
  fsl_hhs_alldaynight = "fs_hhs_daynoteating_yn",
  fsl_hhs_alldaynight_freq = "fs_hhs_daynoteating_freq",
  yes_answer = "yes",
  no_answer = "no",
  rarely_answer = "rarely_1_2",
  sometimes_answer = "sometimes_3_10",
  often_answer = "often_10_times"
  ) %>% 
  select(uuid, fsl_fcs_cat, fsl_fcs_score, fsl_hhs_cat, fsl_hhs_score)
dataset_to_review <- full_join(dataset_to_review, my_review, by = "uuid")

review <- dataset_to_review %>% 
  review_variables(columns_to_review = c("fsl_fcs_cat.x", "fsl_fcs_score.x", "hhs_cat", "hhs_score"),
                   columns_to_compare_with = c("fsl_fcs_cat.y", "fsl_fcs_score.y", "fsl_hhs_cat", "fsl_hhs_score"))

review$review_table %>% 
  group_by(variable,review_check,review_comment) %>% 
  tally()
```

- There are 10 fcs categories that are different.
- There are 100 HHS categories that are different

```{r}
review$dataset %>% 
  filter(!review_check_fsl_fcs_cat.x) %>% 
  select(uuid, review_comment_fsl_fcs_cat.x, fsl_fcs_score.x, fsl_fcs_cat.x, fsl_fcs_cat.y)

```
- Food Consumption Score have different categories, what threshold were used to compute the FCS?  Maybe 28-42?


```{r}
review$dataset %>% 
  filter(!review_check_hhs_cat) %>% 
  select(hhs_cat, fsl_hhs_cat) %>% 
  table(useNA = "ifany")
```
- HHS is fine. Labeling is different
:::

# impactR4PHU and humind

The functions about public health checks and indicators are more updated on the `impactR4PHU`. More information on [this repository](https://github.com/impact-initiatives/impactR4PHU).
The functions about the Multi Sector Needs Index are in `humind`. More information on [this repository](https://github.com/impact-initiatives-hppu/humind).
