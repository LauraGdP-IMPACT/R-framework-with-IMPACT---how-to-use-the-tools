---
title: "01 - R framework with IMPACT - session 1"
author: "Yann Say"
date: last-modified

---

# IMPACT R framework

![](config/images/rframwork.png)

The IMPACT R framework has been developed to meet the requirements of the IMPACT research cycle. <br/><br/> The ecosystem is a modular framework with two dimensions:

-   a horizontal dimension that focuses on the outcome of a given step, and
-   a vertical dimension that focuses on the content of a given step.

The framework is built around:

-   **4 steps**: 
    -   **Cleaning**: any manipulation to go from the raw data to the clean data
    -   **Composition**: any manipulation before the analysis e.g. adding indicators, adding information from loop or main, aok aggregation, etc.
    -   **Analysis**: any manipulation regarding only the analysis
    -   **Outputs**: any manipulation to format the outputs.
-   **4 verbs**: 
    -   **Add**: functions that will add a variable (column) to the dataset.
    -   **Check**: functions that will flag values based on a specific check. It will return them in a log. A **check\_**\* will return a list: the checked dataset, and the log. The function takes a dataset as input and returns the dataset + the new indicator (and any intermediate steps used for the calculation).
    -   **Create**: functions that will create, transform something, e.g. creating a cleaning log with the checks to be filled, create analysis results table, create an output. Outputs from **create\_**\* functions outputs can be in different shape, format, etc.
    -   **Review**: functions that will review an object by comparing it to standards or another object and flags differences, e.g. reviewing the cleaning by comparing the raw dataset, the clean dataset and the cleaning log, analysis comparing it with another analysis.
-   **2 adjectives**: 
    -   **Pipe-able**: In the framework, functions of the same family should be pipe-able. In the following case, 2 **check\_**\* functions are piped.
    -   **Independent**: At any given step, the user can change tool. Each input and each output of a step should follow the same format and definition.

These elements will help to improve cooperation and collaboration between different teams while allowing modularity to adapt to each context and assessment.

# Cleaning - Checking a dataset

The following section will present some introduction about the composition.

![](config/images/step%20-%20cleaning.png)

```{r}
#| warning: false
library(cleaningtools)
library(dplyr)

my_raw_dataset <- cleaningtools::cleaningtools_raw_data
my_kobo_survey <- cleaningtools::cleaningtools_survey
my_kobo_choice <- cleaningtools::cleaningtools_choices
```

::: {.callout-tip appearance="minimal"}
### check\_\*

![](config/images/verb%20-%20check.png)

**check\_**\* functions will flag values based on a specific check. It will return them in a log. A \*check\_\*\* will return a list: the checked dataset, and the log.

**check\_**\* functions are used only in the cleaning step.
:::

## check_outliers

```{r}
#| output: false
my_log1 <- my_raw_dataset %>% 
  check_outliers(uuid_column = "X_uuid")
```

In this example, there are:

-   `checked_dataset`: the raw dataset (with extra variables if needed)
-   `potential_outliers`: a log of potential outliers

```{r}
typeof(my_log1)

my_log1 %>% 
  names()
```

The log has at least 4 columns:

-   `uuid`: the unique identifier
-   `issue`: the issue being flagged
-   `question`: the name of the question
-   `old_value`: the value being flagged

```{r}
my_log1$potential_outliers %>% 
  head()
```

::: {.callout-note .column-margin}
Outliers are defined as +/- 3 standard deviation from the mean.

For log outliers, log(x + 1) is used.
:::

## check_duplicate

```{r}
my_log2 <- my_raw_dataset %>% 
  check_duplicate(uuid_column = "X_uuid")

my_log2$duplicate_log %>% 
  head()
```

There is no duplicate. The log is empty.

## Pipe-able

::: {.callout-tip appearance="minimal"}
### Pipe-able

The framework is built around 2 adjectives, **pipe-able** and **independent**. In the framework, functions of the same family should be pipe-able. In the following case, 2 **check\_**\* functions are piped.
:::

```{r}
#| output: false
my_log3 <- my_raw_dataset %>% 
  check_outliers(uuid_column = "X_uuid") %>% 
  check_duplicate(uuid_column = "X_uuid")
```

```{r}
names(my_log3)
```

```{r}
my_log3$potential_outliers %>% 
  head()
```

```{r}
my_log3$duplicate_log %>% 
  head()
```

## More checks

This an example of more checks that exist.

```{r}
#| output: false

more_logs <- my_raw_dataset %>% 
  check_duplicate(uuid_column = "X_uuid") %>% 
  check_soft_duplicates(uuid_column = "X_uuid", kobo_survey = my_kobo_survey, sm_separator = ".") %>%
  check_outliers(uuid_column = "X_uuid") %>%
  check_value(uuid_column = "X_uuid") 
```

## add_duration

::: {.callout-tip appearance="minimal"}
### add\_\*

![](config/images/verb%20-%20add.png)

**add\_**\* functions will add a variable (column) to the dataset. For example, to add the duration of a survey, to add the food consumption score category, etc.

**add\_**\* function takes a dataset as input and returns the dataset + the new indicator (and any intermediate steps used for the calculation).

For example, to check the duration of a survey, there is only the start and end, but not the duration column.
:::

```{r}
more_logs$checked_dataset <- more_logs$checked_dataset %>% 
  add_duration(uuid_column = "X_uuid", start_column = "X.U.FEFF.start", end_column = "end")
more_logs$checked_dataset[1:6, c("start_date", "start_time", "end_date", "end_time", "days_diff", "duration")]

```

::: {.callout-warning .column-margin}
The duration is added to the `checked_dataset` in the list, not in the `my_raw_dataset` dataframe. The **check\_**\* functions are used in a pipe, so it needs the current dataset to be modified.
:::

::: {.callout-warning .column-margin}
At the moment, `add_duration` takes very specific format. It will change in the future to become more robust and using **lubridate**.
:::

`check_duration` can now be used with the previous checks.

```{r}
more_logs <- more_logs %>% 
  check_duration(column_to_check = "duration", uuid_column = "X_uuid")
```

As much as possible, **check\_**\* functions take default argument or the functions will be able to guess some information, e.g. the `check_outliers` function guesses some numerical values. Some functions need more information.

## other/text columns

`check_other` needs the list of columns to be checked. It currently, it cannot detect the open text question. KOBO tool can be used.

```{r}
other_columns_to_check <- my_kobo_survey %>% 
  dplyr::filter(type == "text") %>% 
  dplyr::filter(name %in% names(my_raw_dataset)) %>%
  dplyr::pull(name) 

more_logs <- more_logs %>% 
  check_others(uuid_column = "X_uuid", columns_to_check = other_columns_to_check) 
```

## check_logical_with_list

In other cases, the check is specific and should be tailored to the dataset, for example, `check_logical_with_list`. All the logical checks can be recorded in an excel file.

```{r}
logical_check_list <- readxl::read_excel("inputs/01 - example - check_list.xlsx")
logical_check_list
```

The check list has 4 columns:

-   check_id : the name of the check
-   description: the description of the check
-   check_to_perform: the check to perform. The format for the check to be performed should take the format based on tidyverse. That format is as if a new indicator is create with a mutate. That new indicator should be a logical (i.e. TRUE or FALSE) with TRUE being the value to flag.

This list can then be used with `check_logical_with_list`.

```{r}
example_logic <- my_raw_dataset %>% 
  check_logical_with_list(uuid_column = "X_uuid",
                          list_of_check = logical_check_list,
                          check_id_column = "check_id",
                          check_to_perform_column = "check_to_perform",
                          columns_to_clean_column = "columns_to_clean",
                          description_column = "description")
```

```{r}

example_logic$logical_all %>% 
  head()
```

The log returns :

-   uuid
-   question: for all variables in **columns_to_clean**
-   old value: for all variables in **columns_to_clean**
-   issue
-   check_id: logical check identifier
-   check_binding: the combination of the check_id and the uuid.

One check can be flagged in several rows, in the example above, for each uuid, the primary_livelihood and tot_expenses are flagged.

Format for the **check_to_perform** should take the format based on *tidyverse*. That format is as if a new indicator is create with a `mutate`. That new indicator should be a logical (i.e. TRUE or FALSE) with TRUE being the value to flag.

```{r}
my_raw_dataset %>% 
  dplyr::mutate(xxx =  primary_livelihood.employment == 1 & tot_expenses < 200000) %>% 
  dplyr::select(X_uuid, xxx, primary_livelihood.employment, tot_expenses) %>% 
  head()
```

The checked dataset will be return with extra columns, i.e. a logical variable with the name of the **check_id**.

```{r}
example_logic$checked_dataset[1:6,tail(names(example_logic$checked_dataset))]
```

::: {.callout-note .column-margin}
If you don't include **columns_to_clean** the `check_logical_with_list` function will try to guess the variables. Not guarantee it will read or pick the correct names.
:::

# Exercises

## Exercise 1

Try the following with a dataset:

-   Perform a check to spot personal identifiable information

```{r}
library(cleaningtools)
library(dplyr)

my_raw_dataset <- cleaningtools::cleaningtools_raw_data
my_kobo_survey <- cleaningtools::cleaningtools_survey
my_kobo_choice <- cleaningtools::cleaningtools_choices
```

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

Try the function `check_pii`
:::

::: {.callout-tip collapse="true" appearance="minimal"}
### Expand to get the answer

```{r}
#| output: false
my_raw_dataset %>% 
  check_pii(uuid_column = "X_uuid")
```
:::

## Exercise 2

-   Perform a check that will look at the percentages of missing value per observation and that will spot any observation that is *different*.

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

Try the function `check_percentage_missing`
:::

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

Did you try to add a new column with `add_percentage_missing`
:::

::: {.callout-tip collapse="true" appearance="minimal"}
### Expand to get the answer

```{r}
#| output: false
my_raw_dataset <- my_raw_dataset %>% 
  add_percentage_missing(kobo_survey = my_kobo_survey)
  
my_raw_dataset %>% 
  check_percentage_missing(uuid_column = "X_uuid")
```

Or if using a log already

```{r}
#| output: false
more_logs$checked_dataset <- more_logs$checked_dataset %>% 
  add_percentage_missing(kobo_survey = my_kobo_survey)
more_logs %>% 
  check_percentage_missing(uuid_column = "X_uuid")
```
:::

## Exercise 3

-   Fill the excel checklist to do the following checks:
    -   household number (variable: **num_hh_member**) is above 8.
    -   the water source for drinking water is bottled (variable: **water_source_drinking**, value: **bottled**) and the household always treat the drinking water (variable: **treat_drink_water**, value: **always_treat**).
    -   the water source for drinking water is bottled (variable: **water_source_drinking**, value: **bottled**) and one of the main reason for the the household to not meet its water needs is the water pressure (variable: **access_water_enough_why_not**, value: **water_pressure**, this is a select multiple)
    
```{r}
#| echo: false
my_kobo_survey %>% 
  filter(name %in% c("num_hh_member", "water_source_drinking", "treat_drink_water","access_water_enough_why_not")) %>% 
  select(name, `label::English (en)`, type)
  
my_kobo_choice %>% 
  filter(list_name %in% c("water_sources","treat", "barriers_water_needs"),
         name %in% c("bottled", "always_treat", "water_pressure")) %>% 
  select(name,`label::English (en)`, list_name )
```

```{r}
#| output: false
exercise_check_list <- readxl::read_excel("inputs/01 - example - check_list.xlsx")

my_raw_dataset %>% 
    check_logical_with_list(uuid_column = "X_uuid",
                          list_of_check = exercise_check_list,
                          check_id_column = "check_id",
                          check_to_perform_column = "check_to_perform",
                          columns_to_clean_column = "columns_to_clean",
                          description_column = "description")
```

::: {.callout-tip collapse="true" appearance="minimal"}
### Expand to get the answer

```{r}
#| output: false
my_check_list <- data.frame(check_id = c("check_household number", "check_water_treatment", "check_3"),
                            description = c("num_hh_member is big","using bottled water and always treat","using bottled water and main reason is water pressure"),
                            check_to_perform = c("num_hh_member > 8","water_source_drinking == \"bottled\" & treat_drink_water == \"always_treat\"","water_source_drinking == \"bottled\" & access_water_enough_why_not.water_pressure == TRUE"),
                            columns_to_clean = c("num_hh_member","water_source_drinking, treat_drink_water","water_source_drinking, access_water_enough_why_not.water_pressure"))

my_raw_dataset %>% 
    check_logical_with_list(uuid_column = "X_uuid",
                          list_of_check = my_check_list,
                          check_id_column = "check_id",
                          check_to_perform_column = "check_to_perform",
                          columns_to_clean_column = "columns_to_clean",
                          description_column = "description")
```
:::

## Extra

-   Try to add duration with audit files.

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a tip

Try `create_audit_list()` and `add_duration_from_audit()`
:::
