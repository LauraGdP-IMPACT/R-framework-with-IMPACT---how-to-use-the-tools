---
title: "02 - R framework with IMPACT - session 2"
author: "Yann Say"
date: last-modified

format:
  html:
    toc: true
    css: config/css/styles.css
    df-print: kable
    embed-resources: true
---

```{r}
#| warning: false
library(cleaningtools)
library(dplyr)

my_raw_dataset <- cleaningtools::cleaningtools_raw_data
my_kobo_survey <- cleaningtools::cleaningtools_survey
my_kobo_choice <- cleaningtools::cleaningtools_choices
```

This section continues with the cleaning step.
![](config/images/step - cleaning.png)

# Recap

```{r}
#| output: false
more_logs <- my_raw_dataset %>% 
  check_duplicate(uuid_column = "X_uuid") %>% 
  check_soft_duplicates(uuid_column = "X_uuid", kobo_survey = my_kobo_survey, sm_separator = ".") %>%
  check_outliers(uuid_column = "X_uuid") %>%
  check_value(uuid_column = "X_uuid") 
more_logs$checked_dataset <- more_logs$checked_dataset %>% 
  add_duration(uuid_column = "X_uuid", start_column = "X.U.FEFF.start", end_column = "end")
more_logs <- more_logs %>% 
  check_duration(column_to_check = "duration", uuid_column = "X_uuid")
other_columns_to_check <- my_kobo_survey %>% 
  filter(type == "text") %>% 
  filter(name %in% names(my_raw_dataset)) %>%
  pull(name) 

more_logs <- more_logs %>% 
  check_others(uuid_column = "X_uuid", columns_to_check = other_columns_to_check) 
logical_check_list <- readxl::read_excel("inputs/01 - example - check_list.xlsx")
more_logs <- more_logs %>% 
  check_logical_with_list(uuid_column = "X_uuid",
                          list_of_check = logical_check_list,
                          check_id_column = "check_id",
                          check_to_perform_column = "check_to_perform",
                          columns_to_clean_column = "columns_to_clean",
                          description_column = "description")

```


# Cleaning - Creating a cleaning log

::: {.callout-tip appearance="minimal"}
### create\_\*

![](config/images/verb - create.png)

**create_**\* functions will create, transform something, e.g. creating a cleaning log with the checks to be filled, create analysis results table, create an output.

Outputs from **create_**\* functions outputs can be in different shape, format, etc. 

**create_**\* function is catch-all.
:::

## create_combined_log

`create_combined_log` will combined all the logs from a list into one. It will also add 2 columns that will be used for the cleaning.

```{r}
names(more_logs)
my_combined_log <- create_combined_log(more_logs)

typeof(my_combined_log)
names(my_combined_log)

my_combined_log$cleaning_log %>% 
  head()
```

The cleaning log contains all the columns from all the logs from `more_logs` with in addition:

-   check_binding is filled for all rows.
-   change_type (empty)
-   new_value (empty)

## add_info_to_cleaning_log

If more information from the dataset should be added, the function `add_info_to_cleaning_log` can help.

::: {.callout-tip appearance="minimal"}
### add\_\*

![](config/images/verb - add.png)

**add_**\* functions will add a variable (column) to the dataset. For example, to add the duration of a survey, to add the food consumption score category, etc.

**add_**\* function takes a dataset as input and returns the dataset + the new indicator (and any intermediate steps used for the calculation). 

For example, to check the duration of a survey, there is only the start and end, but not the duration column.
:::

```{r}
my_combined_log <- my_combined_log %>% 
  add_info_to_cleaning_log(dataset_uuid_column = "X_uuid", 
                           information_to_add = "enumerator_num")

my_combined_log$cleaning_log %>% 
  head()
```

## create_xlsx_cleaning_log

```{r}
#| output: false
create_xlsx_cleaning_log(my_combined_log,
                         sm_dropdown_type = "logical",
                         output_path =  "outputs/01 - example - cleaning-log-no-kobo.xlsx")
```

`create_xlsx_cleaning_log` will write an excel file with:

-   checked_dataset tab: the checked dataset, with additional columns if any.
-   cleaning_log tab: the combined log with the **change_type** column with a data validation rules.
-   readme tab: change_type values definition.

There are 4 actions possible:

-   change_response: Change the response to new.value
-   blank_response: Remove and NA the response
-   remove_survey: Delete the survey
-   no_action: No action to take.

This log will have to be filled in with actions to take and new value if needed.

```{r}
#| output: false
create_xlsx_cleaning_log(my_combined_log,
                         kobo_survey = my_kobo_survey,
                         kobo_choices = my_kobo_choice,
                         use_dropdown = T,
                         sm_dropdown_type = "logical",
                         output_path =  "outputs/02 - example - cleaning-log-with-kobo.xlsx")
```

If the KOBO information are provided and the **use_dropdown** argument is set to TRUE, **new_value** will have a data validation rule based on the KOBO options.

::: callout-note
Select multiple dummy columns (TRUE/FALSE or 1/0) are flagged and used later for the cleaning, not the parent column.
:::


# Cleaning - Creating a clean dataset

::: callout-important
The cleaning has to be filled before moving forward. The above steps are to create the cleaning log, not to **fill** it or **clean** the dataset. Filling the cleaning log is not an automatic step for this process. The decision to change a value has to be recorded.
:::

::: {.callout-tip appearance="minimal"}
### review\_\*

![](config/images/verb - review.png)

**review_**\* functions will review an object by comparing it to standards or another object and flags differences, e.g. reviewing the cleaning by comparing the raw dataset, the clean dataset and the cleaning log, analysis comparing it with another analysis. 

-   if the cleaning has been filled correctly
-   the cleaning has been done correctly
-   comparing indicators
-   comparing analysis
-   etc.
:::

## review_cleaning_log

`review_cleaning_log` will review the **filled** cleaning log.

```{r}
my_filled_log <- readxl::read_excel("inputs/02 - example - cleaning-log-with-kobo - filled.xlsx", sheet = 2)

check_log_results <- review_cleaning_log(raw_dataset = my_raw_dataset,
                                        raw_data_uuid_column = "X_uuid",
                                        cleaning_log = my_filled_log, 
                                        cleaning_log_uuid_column = "uuid",
                                        cleaning_log_question_column = "question",
                                        cleaning_log_new_value_column = "new_value",
                                        cleaning_log_change_type_column = "change_type",
                                        change_response_value = "change_response")
check_log_results
```

## create_clean_data

To create the clean dataset, `create_clean_data` will use the raw dataset and the filled cleaning log.

```{r}
my_clean_data <- create_clean_data(raw_dataset = my_raw_dataset,
                                   raw_data_uuid_column = "X_uuid",
                                   cleaning_log = my_filled_log, 
                                   cleaning_log_uuid_column = "uuid",
                                   cleaning_log_question_column = "question",
                                   cleaning_log_new_value_column = "new_value",
                                   cleaning_log_change_type_column = "change_type")
```

## recreate_parent_column

In the cleaning log, some select multiple are changed, but only the dummy.

```{r}
my_filled_log %>% 
  filter(question == "primary_livelihood.employment", 
         change_type == "change_response") %>% 
  select(uuid, question, old_value, new_value)
```

The parent column did not change, in the following example employment still appears in the parent column.

```{r}
my_clean_data %>% 
  filter(X_uuid %in% c("eb3b9935-fa0b-4d54-8058-3b629f1421ad", "eec1f630-15d5-475e-a344-32bba74b32ea", "f1175d29-ce1f-43a7-b3d1-ee26cd1b8cdb")) %>% 
  select(X_uuid,primary_livelihood, primary_livelihood.employment)
```

`recreate_parent_column` will recode the parent columns based on the dummies.

```{r}
#| output: false
my_clean_data2 <- recreate_parent_column(dataset = my_clean_data,
                                         uuid_column = "X_uuid",
                                         kobo_survey = my_kobo_survey,
                                         kobo_choices = my_kobo_choice,
                                         sm_separator = ".", 
                                         cleaning_log_to_append = my_filled_log)
```

The parent are corrected, employment does not appear in the parent column.

```{r}
my_clean_data2$data_with_fix_concat %>% 
  filter(X_uuid %in% c("eb3b9935-fa0b-4d54-8058-3b629f1421ad", "eec1f630-15d5-475e-a344-32bba74b32ea", "f1175d29-ce1f-43a7-b3d1-ee26cd1b8cdb")) %>% 
  select(X_uuid,primary_livelihood, primary_livelihood.employment)
```

The changes were added to the cleaning log.

```{r}
my_clean_data2$cleaning_log %>% 
  filter(question == "primary_livelihood", 
         uuid %in% c("eb3b9935-fa0b-4d54-8058-3b629f1421ad", "eec1f630-15d5-475e-a344-32bba74b32ea", "f1175d29-ce1f-43a7-b3d1-ee26cd1b8cdb")) %>% 
  select(uuid, question, old_value, new_value)
```

## review_others

In the cleaning log, some opentext values are changed to blank. Some open text questions are linked some skip logic, i.e. *what is X? Other, please specify*. In some cases, values some values should be changed.

In the example below, the value for **water_supply_other_neighbourhoods_why** for the **uuid 019bc718-c06a-46b8-bba8-c84f6c6efbd5** was changed to NA.

```{r}
my_filled_log %>% 
  filter(question == "water_supply_other_neighbourhoods_why", 
         change_type == "blank_response")
```

The kobo show a skip logic based on **water_supply_other_neighbourhoods**.

```{r}
my_kobo_survey %>% 
  filter(name == "water_supply_other_neighbourhoods_why") %>% 
  select(type, name, relevant)
```

```{r}
my_clean_data %>% 
  filter(X_uuid == "019bc718-c06a-46b8-bba8-c84f6c6efbd5") %>% 
  select(water_supply_other_neighbourhoods, water_supply_other_neighbourhoods_why	)
```

Should the value of **water_supply_other_neighbourhoods** be changed? It depends on the question and skip logic but it important to flag those so a decision can be taken.

```{r}
review_other_log <- review_others(dataset = my_clean_data2$data_with_fix_concat,
                                  uuid_column = "X_uuid", 
                                  kobo_survey = my_kobo_survey, 
                                  columns_not_to_check = "consent_telephone_number")
```

## review_cleaning

```{r}
#| output: false
my_deletion_log <- my_clean_data2$cleaning_log %>% 
  filter(change_type == "remove_survey")

my_filled_log_no_deletion <- my_clean_data2$cleaning_log %>% 
  filter(change_type != "remove_survey") %>% 
  filter(!uuid %in% my_deletion_log$uuid)

review_of_cleaning <- review_cleaning(raw_dataset = my_raw_dataset,
                    raw_dataset_uuid_column = "X_uuid", 
                    clean_dataset = my_clean_data2$data_with_fix_concat,
                    clean_dataset_uuid_column = "X_uuid",
                    cleaning_log = my_filled_log_no_deletion, 
                    cleaning_log_uuid_column = "uuid",
                    cleaning_log_question_column = "question",
                    cleaning_log_new_value_column = "new_value",
                    cleaning_log_change_type_column = "change_type", 
                    cleaning_log_old_value_column = "old_value", 
                    deletion_log = my_deletion_log, 
                    deletion_log_uuid_column = "uuid"
                    )
```

# Exercises

## Exercise 1

- Export the cleaning log you have created previously. The previous log is loaded below.
```{r}
previous_exercise_log <- readRDS("inputs/03 - exercise - previous_log.RDS")

previous_exercise_log %>% names()
```


::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint.

Did you try the function `create_combined_log`
:::

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint.

Did you try the function `create_xlsx_cleaning_log`
:::

::: {.callout-tip collapse="true" appearance="minimal"}
### Expand to get the answer

```{r}
#| output: false
previous_exercise_log %>% 
  create_combined_log() %>%
  create_xlsx_cleaning_log(output_path = "outputs/03 - correction - cleaning_log.xlsx", 
                           kobo_survey = my_kobo_survey,
                           kobo_choices = my_kobo_choice,
                           sm_dropdown_type = "logical",
                           use_dropdown = TRUE)
  
```
:::


## Exercise 2

- Create the clean data from the raw dataset and the filled cleaning.

```{r}
exercise_filled_log <- readxl::read_excel("inputs/04 - exercise - cleaning_log - filled.xlsx", sheet = "cleaning_log")
```

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

Did you try the function `create_clean_data`
:::

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

Did you try the function `recreate_parent_column`
:::

::: {.callout-tip collapse="true" appearance="minimal"}
### Expand to get the answer

```{r}
#| output: false
exercise_clean_dataset <- create_clean_data(raw_dataset = my_raw_dataset,
                                            raw_data_uuid_column = "X_uuid",
                                            cleaning_log = exercise_filled_log, 
                                            cleaning_log_uuid_column = "uuid",
                                            cleaning_log_question_column = "question",
                                            cleaning_log_new_value_column = "new_value",
                                            cleaning_log_change_type_column = "change_type")


exercise_clean_dataset2 <- recreate_parent_column(exercise_clean_dataset,
                                                  uuid_column = "X_uuid", 
                                                  kobo_survey = my_kobo_survey,
                                                  kobo_choices = my_kobo_choice,
                                                  cleaning_log_to_append = exercise_filled_log)

  
```
:::

## Exercise 3

- Review the cleaning below, if there is someone else doing the exercise, you can try to review someone's cleaning.

```{r}
exercise3_clean_dataset <- readxl::read_excel("inputs/05 - exercise - clean dataset for review.xlsx")

exercise3_cleaning_log <- readxl::read_excel("inputs/05 - exercise - clean dataset for review.xlsx", sheet = 2)

```

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

Did you try the function `review_cleaning`
:::

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

Did you separate the cleaning log?
:::

::: {.callout-tip collapse="true" appearance="minimal"}
### Expand to get the answer

```{r}
#| output: false
exercise3_deletion_log <- exercise3_cleaning_log %>% 
  filter(change_type == "remove_survey")

exercise3_log_no_deletion <- exercise3_cleaning_log %>% 
  filter(change_type != "remove_survey") %>% 
  filter(!uuid %in% exercise3_deletion_log$uuid)

review_of_cleaning <- review_cleaning(raw_dataset = my_raw_dataset,
                                      raw_dataset_uuid_column = "X_uuid", 
                                      clean_dataset = exercise3_clean_dataset,
                                      clean_dataset_uuid_column = "X_uuid",
                                      cleaning_log = exercise3_log_no_deletion, 
                                      cleaning_log_uuid_column = "uuid",
                                      cleaning_log_question_column = "question",
                                      cleaning_log_new_value_column = "new_value",
                                      cleaning_log_change_type_column = "change_type", 
                                      cleaning_log_old_value_column = "old_value", 
                                      deletion_log = exercise3_deletion_log, 
                                      deletion_log_uuid_column = "uuid"
)
```

:::

# Review templates

There are some project templates that can be used to review the cleaning. More information on [this repository](https://github.com/impact-initiatives/impacttemplates).

# Composition - adding indicators

The framework is built around 4 steps: cleaning, composition, analysis, outputs

-   *Cleaning*: any manipulation to go from the raw data to the clean data
-   *Composition*: any manipulation before the analysis e.g. adding indicators, adding information from loop or main, aok aggregation, etc.
-   *Analysis*: any manipulation regarding only the analysis
-   *Outputs*: any manipulation to format the outputs.

The following section will present some introduction about the composition.

![](config/images/step - composition.png)

```{r}
#| warning: false
library(addindicators)
library(dplyr)

my_data <- addindicators::addindicators_MSNA_template_data
```

::: {.callout-tip appearance="minimal"}
### add\_\*

![](config/images/verb - add.png)

**add_**\* functions will add a variable (column) to the dataset. For example, to add the duration of a survey, to add the food consumption score category, etc.

**add_**\* function takes a dataset as input and returns the dataset + the new indicator (and any intermediate steps used for the calculation). 

For example, to check the duration of a survey, there is only the start and end, but not the duration column.

With `addindicators` some intermediate columns can be added if they are used to create the new indicator.
:::

## add_fcs

```{r}
my_data_with_fcs <- my_data %>% add_fcs(
  cutoffs = "normal",
  fsl_fcs_cereal = "fs_fcs_cereals_grains_roots_tubers",
  fsl_fcs_legumes = "fs_fcs_beans_nuts",
  fsl_fcs_veg = "fs_fcs_vegetables_leaves",
  fsl_fcs_fruit = "fs_fcs_fruit",
  fsl_fcs_meat = "fs_fcs_meat_fish_eggs",
  fsl_fcs_dairy = "fs_fcs_dairy",
  fsl_fcs_sugar = "fs_fcs_sugar",
  fsl_fcs_oil = "fs_fcs_oil_fat_butter"
)

my_data_with_fcs[, tail(names(my_data_with_fcs), 10)] %>%
  head()
```
::: {.callout-note .column-margin}
You can learn more about food security indicators [here](https://fscluster.org/handbook/).
:::

## add_hhs

::: {.callout-tip appearance="minimal"}
### Pipe-able

The framework is built around 2 adjectives, **pipe-able** and **independent**. In the framework, functions of the same family should be pipe-able. In the following case, 2 **add\_**\* functions are piped.
:::


```{r}
my_data_with_indicators <- my_data %>%
  add_fcs(
  cutoffs = "normal",
  fsl_fcs_cereal = "fs_fcs_cereals_grains_roots_tubers",
  fsl_fcs_legumes = "fs_fcs_beans_nuts",
  fsl_fcs_veg = "fs_fcs_vegetables_leaves",
  fsl_fcs_fruit = "fs_fcs_fruit",
  fsl_fcs_meat = "fs_fcs_meat_fish_eggs",
  fsl_fcs_dairy = "fs_fcs_dairy",
  fsl_fcs_sugar = "fs_fcs_sugar",
  fsl_fcs_oil = "fs_fcs_oil_fat_butter"
  ) %>%
  add_hhs(
  )

my_data_with_indicators[, tail(names(my_data_with_indicators), 14)] %>%
  head()
```

# Composition - reviewing indicators

Reviewing indicators will compare 2 indicators together and present the differences. It will not check how the indicator was created nor check for inconsistencies. That mean, to review an indicator, it is necessary to create one and compare them. The functions `review_one_variable` and `review_variables` will focus on the latter.

## review_variables

First, a new dataset can be created for the review.
```{r}
review_df <- addindicators_MSNA_template_data %>%
  add_fcs(
  cutoffs = "normal",
  fsl_fcs_cereal = "fs_fcs_cereals_grains_roots_tubers",
  fsl_fcs_legumes = "fs_fcs_beans_nuts",
  fsl_fcs_veg = "fs_fcs_vegetables_leaves",
  fsl_fcs_fruit = "fs_fcs_fruit",
  fsl_fcs_meat = "fs_fcs_meat_fish_eggs",
  fsl_fcs_dairy = "fs_fcs_dairy",
  fsl_fcs_sugar = "fs_fcs_sugar",
  fsl_fcs_oil = "fs_fcs_oil_fat_butter"
  ) %>%
  select(uuid, fsl_fcs_score, fsl_fcs_cat)
```

Then the dataset to be reviewed and the new dataset can be binded together.

```{r}
binded_df <- my_data_with_indicators %>%
  full_join(review_df, by = "uuid")
```

::: {.callout-note .column-margin}
I would advice to use a `full_join` rather than a `left/right_join`. That way if any computation has missing value they will be spotted.
:::

::: {.callout-note .column-margin}
With the `join_*` if the names are the same .x and .y will added to the names.
:::

::: {.callout-tip appearance="minimal"}
### review\_\*

![](config/images/verb - review.png)

**review_**\* functions will review an object by comparing it to standards or another object and flags differences, e.g. reviewing the cleaning by comparing the raw dataset, the clean dataset and the cleaning log, analysis comparing it with another analysis. 
:::
```{r}
review_one_var <- review_variables(binded_df,
  columns_to_review = "fsl_fcs_cat.x",
  columns_to_compare_with = "fsl_fcs_cat.y")


review_one_var %>% 
  names()
```
It is a list with the dataset and a review table.

```{r}
review_one_var$review_table %>% 
  head()
```

The review table can be summarised to have a quicker overview.

```{r}
review_one_var$review_table %>%
  group_by(review_check, review_comment) %>%
  tally()
```

To see how differences are shown, some noise is introduced to the dataset.

```{r}
jittered_df <- binded_df
set.seed(123)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.x"] <- sample(unique(jittered_df$fsl_fcs_cat.y), 5, T)
set.seed(124)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.y"] <- sample(unique(jittered_df$fsl_fcs_cat.y), 5, T)
set.seed(125)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.x"] <- NA
set.seed(1236)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_cat.y"] <- NA
set.seed(1237)
jittered_df[sample(1:nrow(jittered_df), 5), "fsl_fcs_score.x"] <- sample(unique(jittered_df$fsl_fcs_score.x), 5, T)
```

```{r}
review_one_variable_jittered <- review_variables(jittered_df,
  columns_to_review = "fsl_fcs_cat.x",
  columns_to_compare_with = "fsl_fcs_cat.y")

review_one_variable_jittered$review_table %>%
  group_by(review_check, review_comment) %>%
  tally()
```

The dataset has new columns to help filtering for further investigation.

```{r}
review_one_variable_jittered$dataset[, tail(names(review_one_variable_jittered$dataset), 5)] %>%
  head()
```
```{r}
review_one_variable_jittered$dataset %>%
  filter(!review_check_fsl_fcs_cat.x) %>%
  select(uuid, fsl_fcs_cat.x, fsl_fcs_cat.y, review_check_fsl_fcs_cat.x, review_comment_fsl_fcs_cat.x)
```


If there are more than one variable to review, pair-wise vectors can be used.

```{r}
my_review <- review_variables(jittered_df,
  columns_to_review = c("fsl_fcs_cat.x", "fsl_fcs_score.x"),
  columns_to_compare_with = c("fsl_fcs_cat.y", "fsl_fcs_score.y")
)
```

```{r}
my_review$review_table %>%
  group_by(variable, review_check, review_comment) %>%
  tally()
```
```{r}
my_review$dataset %>%
  filter(!review_check_fsl_fcs_cat.x) %>%
  select(uuid, fsl_fcs_cat.x, fsl_fcs_cat.y, review_comment_fsl_fcs_cat.x)
```
```{r}
my_review$dataset %>%
  filter(!review_check_fsl_fcs_score.x) %>%
  select(uuid, fsl_fcs_score.x, fsl_fcs_score.y, review_comment_fsl_fcs_score.x)
```


# Exercises 

## Exercise 1

- Add the **food consumption matrix score** to the dataset. The food consumption matrix score is a food security indicator that uses the **food consumption score**, **household hunger score** and the **reduced coping strategy index**.

```{r}
#| echo: false
names_to_keep <- grep("rCSI", analysistools::analysistools_MSNA_template_survey$name, value = T)
analysistools::analysistools_MSNA_template_survey %>% 
  filter(name %in% names_to_keep,
         name != "rCSI_module") %>% 
  select(name, `label::english`, type) 
```

```{r}
#| eval: false
library(addindicators)
library(dplyr)
```

```{r}
exercise_data <- addindicators_MSNA_template_data %>%
  add_fcs(
  cutoffs = "normal",
  fsl_fcs_cereal = "fs_fcs_cereals_grains_roots_tubers",
  fsl_fcs_legumes = "fs_fcs_beans_nuts",
  fsl_fcs_veg = "fs_fcs_vegetables_leaves",
  fsl_fcs_fruit = "fs_fcs_fruit",
  fsl_fcs_meat = "fs_fcs_meat_fish_eggs",
  fsl_fcs_dairy = "fs_fcs_dairy",
  fsl_fcs_sugar = "fs_fcs_sugar",
  fsl_fcs_oil = "fs_fcs_oil_fat_butter"
  ) %>%
  add_hhs(
  )
```

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

Did you try the function `add_fcm_phase`?
:::

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

The food consumption matrix needs 3 indicators, FCS, rCSI, HHS.
:::

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

Have you used the correct HHS category variable?
:::

::: {.callout-tip collapse="true" appearance="minimal"}
### Expand to get the answer

```{r}
#| output: false
my_answer <- exercise_data %>% add_rcsi(
  ) %>%
  add_fcm_phase(
    fcs_column_name = "fsl_fcs_cat",
    rcsi_column_name = "rcsi_cat",
    hhs_column_name = "hhs_cat_ipc",
    fcs_categories_acceptable = "Acceptable",
    fcs_categories_poor = "Poor",
    fcs_categories_borderline = "Borderline",
    rcsi_categories_low = "No to Low",
    rcsi_categories_medium = "Medium",
    rcsi_categories_high = "High",
    hhs_categories_none = "None",
    hhs_categories_little = "Little",
    hhs_categories_moderate = "Moderate",
    hhs_categories_severe = "Severe",
    hhs_categories_very_severe = "Very Severe"
  )
```
:::

## Exercise 2

- You receive a dataset, you need to review the following four indicators.

  - Food Consumption Score: **fcs_score**, **fcs_cat**
  - Household Hunger Score: **hhs_score**, **hhs_cat**
  
Don't forget to write the review.

```{r}
dataset_to_review <- read.csv("inputs/06 - exercise - dataset_to_review.csv")

dataset_without_indicators <- addindicators::addindicators_MSNA_template_data
```

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

Did you try the function `review_variables`
:::

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

How was the FSC created?
:::

::: {.callout-note collapse="true" appearance="minimal"}
### Expand to get a hint

How was coded the category for the HHS? 
:::

::: {.callout-tip collapse="true" appearance="minimal"}
### Expand to get the answer

```{r}
#| output: false
my_review <- dataset_without_indicators %>% 
    add_fcs(
  cutoffs = "normal",
  fsl_fcs_cereal = "fs_fcs_cereals_grains_roots_tubers",
  fsl_fcs_legumes = "fs_fcs_beans_nuts",
  fsl_fcs_veg = "fs_fcs_vegetables_leaves",
  fsl_fcs_fruit = "fs_fcs_fruit",
  fsl_fcs_meat = "fs_fcs_meat_fish_eggs",
  fsl_fcs_dairy = "fs_fcs_dairy",
  fsl_fcs_sugar = "fs_fcs_sugar",
  fsl_fcs_oil = "fs_fcs_oil_fat_butter"
  )  %>% add_hhs(
    hhs_nofoodhh_1 = "fs_hhs_nofood_yn",
    hhs_nofoodhh_1a = "fs_hhs_nofood_freq",
    hhs_sleephungry_2 = "fs_hhs_sleephungry_yn",
    hhs_sleephungry_2a = "fs_hhs_sleephungry_freq",
    hhs_alldaynight_3 = "fs_hhs_daynoteating_yn",
    hhs_alldaynight_3a = "fs_hhs_daynoteating_freq",
    yes_answer = "yes",
    no_answer = "no",
    rarely_answer = "rarely_1_2",
    sometimes_answer = "sometimes_3_10",
    often_answer = "often_10_times"
  ) %>% 
  select(uuid, fsl_fcs_cat, fsl_fcs_score, hhs_cat, hhs_score)
dataset_to_review <- full_join(dataset_to_review, my_review, by = "uuid")

review <- dataset_to_review %>% 
  review_variables(columns_to_review = c("fsl_fcs_cat.x", "fsl_fcs_score.x", "hhs_cat.x", "hhs_score.x"),
                   columns_to_compare_with = c("fsl_fcs_cat.y", "fsl_fcs_score.y", "hhs_cat.y", "hhs_score.y"))

review$review_table %>% 
  group_by(variable,review_check,review_comment) %>% 
  tally()
```

- There are 10 fcs categories that are different.
- There are 100 HHS categories that are different

```{r}
review$dataset %>% 
  filter(!review_check_fsl_fcs_cat.x) %>% 
  select(uuid, review_comment_fsl_fcs_cat.x, fsl_fcs_score.x, fsl_fcs_cat.x, fsl_fcs_cat.y)

```
- Food Consumption Score have different categories, what threshold were used to compute the FCS?  Maybe 28-42?


```{r}
review$dataset %>% 
  filter(!review_check_hhs_cat.x) %>% 
  select(hhs_cat.x, hhs_cat.y) %>% 
  table(useNA = "ifany")
```
- HHS is fine. Labeling is different
:::

# impactR4PHU

The functions about public health checks and indicators are more updated on the impactR4PHU. More information on [this repository](https://github.com/impact-initiatives/impactR4PHU).
