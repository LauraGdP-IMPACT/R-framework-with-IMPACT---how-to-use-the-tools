---
title: "01 - El marco R de IMPACT - session 1"
author: "Yann Say"
date: last-modified

---

# IMPACT R framework

![](config/images/rframwork.png)

El marco R de IMPACT se desarrollo para cumplir con los requisitos del ciclo de investigación IMPACT. <br/><br/> El marco es modular y tiene dos dimensiones:

-   una dimensión horizontal que se centra en el resultado de un cierto paso, y
-   una dimensión vertical que se centra en el contenido de un cierto paso.

El marco se basa en :

-   **4 etapas**: 
    -   **Limpieza**: cualquier manipulación necesaria para pasar de los datos brutos a los datos limpios.
    -   **Composición**: cualquier manipulaciòn anterior al análisis p.ej., añadir indicadores, añadir información proveniente del bucle o del dato principal , agragación por AOK, etc.
    -   **Análisis**: cualquier manipulaciòn que sea relativa al análisis unicamente
    -   **Resultados**: cualquier manipulaciòn necesaria para formatear los resultados.
-   **4 verbos**: 
    -   **Add**: (añadir) funciones que añaden una nueva variable (columna) a los datos.
    -   **Check**: (verificar) funciones que maracarán valores basándose en una verificación específica. Retornarán estos valores en un registro. Una función check_* devolverá una lista: el conjunto de datos verificado y el registro. La función toma un conjunto de datos como entrada y devuelve el conjunto de datos + el nuevo indicador (y cualquier paso intermedio utilizado para el cálculo).
    -   **Create**: (crear) funciones que crearán o transformaran algun objecto p.ej. functiones que crearán o transformarán algun objeto creando un registro de limpieza con las verificaciones por hacer, creando una tabla de resultados del análisis etc. Las salidas de las funciones **create\_**\* pueden tener formatos diversos.
    -   **Review**: (revisar) funciones que revisarán un objeto comparándolo con estándares u otro objeto y señalaran las diferencias. Por ejemplo, revisando la limpieza comparando el conjunto de datos original, el conjunto de datos limpio y el registro de limplieza o comparando los resultados de dos análisis.
-   ** 2 adjetivos**:
    - **Pipe-able**: (encadenable) En el marco, las funciones de la misma familia son encadenables (es decir, se pueden aplicar una después de la otra). En el siguiento ejemplo, se encadenan dos funciones **check\_**\*.
    - **Independiente**: En cualquier paso dado, el usuario puede cambiar de herramienta. Cada entrada y cada salida de un paso deben seguir el mismo formato y definición.

El objetivo es que este conjunto de elementos ayude a la cooperación y colaboración entre diferentes equipos. Las herramientas presentes en este marco deben ser adaptables a cada contexto y evaluación.


# Limpieza - Verificación de un conjunto de datos

En esta sección, se presentan ciertas herramientas para la verificación de un conjunto de datos.

![](config/images/step%20-%20cleaning.png)

```{r}
#| warning: false
library(cleaningtools)
library(dplyr)

my_raw_dataset <- cleaningtools::cleaningtools_raw_data
my_kobo_survey <- cleaningtools::cleaningtools_survey
my_kobo_choice <- cleaningtools::cleaningtools_choices
```

::: {.callout-tip appearance="minimal"}
### check\_\*

![](config/images/verb%20-%20check.png)

Las funciones de tipo check_* marcarán valores basándose en una verificación específica. Retornarán estos valores en un registro. Una función check_* devolverá una lista: el conjunto de datos verificado y el registro.

Las funciones check_* solo se utilizan durante las etapas de limpieza.
:::

## check_outliers

```{r}
#| output: false
my_log1 <- my_raw_dataset %>% 
  check_outliers(uuid_column = "X_uuid")
```

En este ejemplo, la salida será:

-   `checked_dataset`: el conjunto de datos original (con variables adicionales si es necesario)
-   `potential_outliers`: un registro de posibles valores atípicos.

```{r}
typeof(my_log1)

my_log1 %>% 
  names()
```

El registro tiene al menos 4 columnas:

-   `uuid`: el identificador único de la encuesta
-   `issue`: el problema que se esta señalando
-   `question`: el nombre de la variable en el conjunto de datos
-   `old_value`: el valor que se está señalando

```{r}
my_log1$potential_outliers %>% 
  head()
```

::: {.callout-note .column-margin}
Se considerán como atípicos valores con +/- 3 deviaciones estándar de la media.

Si asumimos una distribución logarítmica, utilizamos la función log(x + 1).
:::

## check_duplicate

```{r}
my_log2 <- my_raw_dataset %>% 
  check_duplicate(uuid_column = "X_uuid")

my_log2$duplicate_log %>% 
  head()
```

Dado que no hay duplicados, el registro está vacío.

## Pipe-able

::: {.callout-tip appearance="minimal"}
### Pipe-able

El marco se basa en 2 adjetivos, **pipe-able** e **independiente**. En el marco, las funciones de la misma familias deben ser encadenables (pipeable). En el siguiente caso, se encadenan 2 funciones **check\_**\*.
:::

```{r}
#| output: false
my_log3 <- my_raw_dataset %>% 
  check_outliers(uuid_column = "X_uuid") %>% 
  check_duplicate(uuid_column = "X_uuid")
```

```{r}
names(my_log3)
```

```{r}
my_log3$potential_outliers %>% 
  head()
```

```{r}
my_log3$duplicate_log %>% 
  head()
```

## Verificaciones adicionales

Este es un ejemplo de verificaciones adicionales que existen.

```{r}
#| output: false

more_logs <- my_raw_dataset %>% 
  check_duplicate(uuid_column = "X_uuid") %>% 
  check_soft_duplicates(uuid_column = "X_uuid", kobo_survey = my_kobo_survey, sm_separator = ".") %>%
  check_outliers(uuid_column = "X_uuid") %>%
  check_value(uuid_column = "X_uuid") 
```

## add_duration

::: {.callout-tip appearance="minimal"}
### add\_\*

![](config/images/verb%20-%20add.png)

Las funciones **add\_**\* añadirán una variable (columna) al conjunto de datos. Por ejemplo, añadirán la duración de una encuesta, añadiran la categoría de puntaje de consumo de alimentos, etc.

Una funcion **add\_**\* toma un conjunto de datos como entrada y devuelve el conjunto de datos + el nuevo indicador (y cualquier paso intermedia utilizado para el cálculo).

En el ejemplo siguiento, se usa la funcion **add_duration** para añadir la duración de la encuesta usando el tiempo de inicio y de fin.
:::

```{r}
more_logs$checked_dataset <- more_logs$checked_dataset %>% 
  add_duration(uuid_column = "X_uuid", start_column = "X.U.FEFF.start", end_column = "end")
more_logs$checked_dataset[1:6, c("start_date", "start_time", "end_date", "end_time", "days_diff", "duration")]

```

::: {.callout-warning .column-margin}
La duración se añade a `checked_dataset` en la lista, no a `my_raw_dataset`. Las funciones **check\_**\* se utilizan en cadena, por lo cual es necesario que el conjunto actual de datos sea modificado.
:::

::: {.callout-warning .column-margin}
En este momento, la funcion `add_duration` acepta solo un formato muy específico. En el futuro, cambiará para volverse màs robusta y se harà usando **lubridate**.
:::

`check_duration` se puede utilizar en cadena con las verificaciones anteriores.

```{r}
more_logs <- more_logs %>% 
  check_duration(column_to_check = "duration", uuid_column = "X_uuid")
```

En la medida de lo posible, las funciones **check\_**\* toman argumentos predeterminados o infieren la información necesaria, p.ej. la funcion `check_outliers` infiere que columnas contienen valores numericos. Ciertas funciones requieren mãs informaciòn.

## Columnas de texto

La funcion `check_other` necesita la lista de columnas que se deben verificar. Al momento, no es capaz de detectar preguntas de texto abierto. Se puede utilizar la herramienta KOBO.

```{r}
other_columns_to_check <- my_kobo_survey %>% 
  dplyr::filter(type == "text") %>% 
  dplyr::filter(name %in% names(my_raw_dataset)) %>%
  dplyr::pull(name) 

more_logs <- more_logs %>% 
  check_others(uuid_column = "X_uuid", columns_to_check = other_columns_to_check) 
```

## check_logical_with_list

En otros casos, la verificación es específica y debe ser adaptada al conjunto de datos. Es el caso de la función `check_logical_with_list`, a la cual se le puede dar como entrada una tabla de Excel con las verificaciones lógicas por aplicar.

```{r}
logical_check_list <- readxl::read_excel("inputs/01 - example - check_list.xlsx")
logical_check_list
```

La entrada, es decir, la tabla de Excel con las verificaciones lógicas, debe tener 4 columnas:

-   check_id : el nombre de la verificación
-   description : la descripcion de la verificacion 
-   check_to_perform : la verificación por hacer. El formato de la verificación por hacer debe ser compatible con tidyverse. Se debe usar un formato similar al que se utilizaría en la función `mutate` para crear un nuevo indicador lógico (es decir, TRUE o FALSE). La verificación lógica debe estar escrita de manera que la salida TRUE corresponda a la encuesta que se quiera señalar.
-   columns_to_clean : la lista de columnas utilizadas para la verificación lógica.

Una tal lista se puede utilizar con  `check_logical_with_list`.

```{r}
example_logic <- my_raw_dataset %>% 
  check_logical_with_list(uuid_column = "X_uuid",
                          list_of_check = logical_check_list,
                          check_id_column = "check_id",
                          check_to_perform_column = "check_to_perform",
                          columns_to_clean_column = "columns_to_clean",
                          description_column = "description")
```

```{r}

example_logic$logical_all %>% 
  head()
```

El registro que se obtiene contiene las siguientes columnas:

-   uuid: el identificador único de la encuesta
-   question: el nombre de la columna señalada, sera un elemento de la lista **columns_to_clean**
-   old value: el valor en la columna de **columns_to_clean** señalada
-   issue: el problema señalado
-   check_id: el identificador de la verificación lógica
-   check_binding: una combinación del check_id y del uuid.

Para una verificación dada, el registro tendrá varias líneas relativas al mismo señalamiento. En el ejemplo anterior, para cada uuid, los valores de las columnas primary_livelihood y tot_expenses son señalados (una línea por cada uuid por cada columna en columns_to_clean).

El formato de la verificación por hacer debe ser compatible con tidyverse. Se debe usar un formato similar al que se utilizaría en la función `mutate` para crear un nuevo indicador lógico (es decir, TRUE o FALSE). La verificación lógica debe estar escrita de manera que la salida TRUE corresponda a la encuesta que se quiera señalar.
```{r}
my_raw_dataset %>% 
  dplyr::mutate(xxx =  primary_livelihood.employment == 1 & tot_expenses < 200000) %>% 
  dplyr::select(X_uuid, xxx, primary_livelihood.employment, tot_expenses) %>% 
  head()
```

El conjunto de datos verificado incluirá columnas adicionales. Estas columnas tendrán el nombre del check_id y contendrán valores lógicos.

```{r}
example_logic$checked_dataset[1:6,tail(names(example_logic$checked_dataset))]
```

::: {.callout-note .column-margin}
Si no se incluya la lista **columns_to_clean** la funcion `check_logical_with_list` intentará identificar las variables de forma automática. Sin embargo, no se puede garantizar que seleccione los nombres correctos.
:::

# Ejercicios

## Ejercicio 1

Probar lo siguiente con un conjunto de datos:

-   Realiza una verificación para detectar información de identificación personal.

```{r}
library(cleaningtools)
library(dplyr)

my_raw_dataset <- cleaningtools::cleaningtools_raw_data
my_kobo_survey <- cleaningtools::cleaningtools_survey
my_kobo_choice <- cleaningtools::cleaningtools_choices
```

::: {.callout-note collapse="true" appearance="minimal"}
### Haga clic para ver una pista.

Pruebe con la función `check_pii`
:::

::: {.callout-tip collapse="true" appearance="minimal"}
### Haga clic para ver la respuesta.

```{r}
#| output: false
my_raw_dataset %>% 
  check_pii(uuid_column = "X_uuid")
```
:::

## Ejercicio 2

-   Realize una verificación que examine los porcentajes de valores faltantes por encuesta y que señale cualquier observación *atípica*.

::: {.callout-note collapse="true" appearance="minimal"}
### Haga clic para ver una pista.

Pruebe con la función `check_percentage_missing`
:::

::: {.callout-note collapse="true" appearance="minimal"}
### Haga clic para ver una pista.

¿Intento añadir una nueva columna con `add_percentage_missing` ? 
:::

::: {.callout-tip collapse="true" appearance="minimal"}
### Haga clic para ver la respuesta.

```{r}
#| output: false
my_raw_dataset <- my_raw_dataset %>% 
  add_percentage_missing(kobo_survey = my_kobo_survey)
  
my_raw_dataset %>% 
  check_percentage_missing(uuid_column = "X_uuid")
```

Si ya estás utilizando un registro 

```{r}
#| output: false
more_logs$checked_dataset <- more_logs$checked_dataset %>% 
  add_percentage_missing(kobo_survey = my_kobo_survey)
more_logs %>% 
  check_percentage_missing(uuid_column = "X_uuid")
```
:::

## Ejercicio 3

-   Complete una tabla Excel para realizar las siguientes verificaciones lógicas :
    -   El número de miembros del hogar (variable: **num_hh_member**) es superior a 8.
    -   La fuente de agua para beber es agua embotellada (variable: **water_source_drinking**, value: **bottled**) y el hogar siempre trata el agua (variable: **treat_drink_water**, value: **always_treat**).
    -   La fuente de agua para beber es agua embotellada (variable: **water_source_drinking**, value: **bottled**) y una de las principales razones por las que el hogar no satisface sus nececidades de agua es la presión del agua (variable: **access_water_enough_why_not**, value: **water_pressure**, this is a select multiple)
    
```{r}
#| echo: false
my_kobo_survey %>% 
  filter(name %in% c("num_hh_member", "water_source_drinking", "treat_drink_water","access_water_enough_why_not")) %>% 
  select(name, `label::English (en)`, type)
  
my_kobo_choice %>% 
  filter(list_name %in% c("water_sources","treat", "barriers_water_needs"),
         name %in% c("bottled", "always_treat", "water_pressure")) %>% 
  select(name,`label::English (en)`, list_name )
```

```{r}
#| output: false
exercise_check_list <- readxl::read_excel("inputs/01 - example - check_list.xlsx")

my_raw_dataset %>% 
    check_logical_with_list(uuid_column = "X_uuid",
                          list_of_check = exercise_check_list,
                          check_id_column = "check_id",
                          check_to_perform_column = "check_to_perform",
                          columns_to_clean_column = "columns_to_clean",
                          description_column = "description")
```

::: {.callout-tip collapse="true" appearance="minimal"}
### Haga clic para ver la respuesta.

```{r}
#| output: false
my_check_list <- data.frame(check_id = c("check_household number", "check_water_treatment", "check_3"),
                            description = c("num_hh_member is big","using bottled water and always treat","using bottled water and main reason is water pressure"),
                            check_to_perform = c("num_hh_member > 8","water_source_drinking == \"bottled\" & treat_drink_water == \"always_treat\"","water_source_drinking == \"bottled\" & access_water_enough_why_not.water_pressure == TRUE"),
                            columns_to_clean = c("num_hh_member","water_source_drinking, treat_drink_water","water_source_drinking, access_water_enough_why_not.water_pressure"))

my_raw_dataset %>% 
    check_logical_with_list(uuid_column = "X_uuid",
                          list_of_check = my_check_list,
                          check_id_column = "check_id",
                          check_to_perform_column = "check_to_perform",
                          columns_to_clean_column = "columns_to_clean",
                          description_column = "description")
```
:::

## Ejercicio adicional

-   Intente añadir la duración con los archivos de auditoría (es decir, los *audit files* de la herramienta KOBO).

::: {.callout-note collapse="true" appearance="minimal"}
### Haga clic para ver una clave.

Pruebe usando las funciones `create_audit_list()` y `add_duration_from_audit()`
:::
